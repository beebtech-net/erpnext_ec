#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated  by generateDS.py.
# Python 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
#
# Command line options:
#   ('--no-dates', '')
#   ('--no-versions', '')
#   ('-o', 'factura_v2.py')
#
# Command line arguments:
#   0.xsd
#
# Command line:
#   /home/vboxuser/.local/bin/generateDS --no-dates --no-versions -o "factura_v2.py" 0.xsd
#
# Current working directory (os.getcwd()):
#   1
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Start enum classes
#
class idType(str, Enum):
    COMPROBANTE='comprobante'


class obligadoContabilidad(str, Enum):
    SI='SI'
    NO='NO'


#
# Start data representation classes
#
class infoTributaria(GeneratedsSuper):
    """infoTributaria -- Contiene la informacion tributaria generica
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ambiente=None, tipoEmision=None, razonSocial=None, nombreComercial=None, ruc=None, claveAcceso=None, codDoc=None, estab=None, ptoEmi=None, secuencial=None, dirMatriz=None, agenteRetencion=None, contribuyenteRimpe=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ambiente = ambiente
        self.validate_ambiente(self.ambiente)
        self.ambiente_nsprefix_ = None
        self.tipoEmision = tipoEmision
        self.validate_tipoEmision(self.tipoEmision)
        self.tipoEmision_nsprefix_ = None
        self.razonSocial = razonSocial
        self.validate_razonSocial(self.razonSocial)
        self.razonSocial_nsprefix_ = None
        self.nombreComercial = nombreComercial
        self.validate_nombreComercial(self.nombreComercial)
        self.nombreComercial_nsprefix_ = None
        self.ruc = ruc
        self.validate_numeroRuc(self.ruc)
        self.ruc_nsprefix_ = None
        self.claveAcceso = claveAcceso
        self.validate_claveAcceso(self.claveAcceso)
        self.claveAcceso_nsprefix_ = None
        self.codDoc = codDoc
        self.validate_codDoc(self.codDoc)
        self.codDoc_nsprefix_ = None
        self.estab = estab
        self.validate_establecimiento(self.estab)
        self.estab_nsprefix_ = None
        self.ptoEmi = ptoEmi
        self.validate_puntoEmision(self.ptoEmi)
        self.ptoEmi_nsprefix_ = None
        self.secuencial = secuencial
        self.validate_secuencial(self.secuencial)
        self.secuencial_nsprefix_ = None
        self.dirMatriz = dirMatriz
        self.validate_dirMatriz(self.dirMatriz)
        self.dirMatriz_nsprefix_ = None
        self.agenteRetencion = agenteRetencion
        self.validate_agenteRetencion(self.agenteRetencion)
        self.agenteRetencion_nsprefix_ = None
        self.contribuyenteRimpe = contribuyenteRimpe
        self.validate_contribuyenteRimpe(self.contribuyenteRimpe)
        self.contribuyenteRimpe_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoTributaria)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoTributaria.subclass:
            return infoTributaria.subclass(*args_, **kwargs_)
        else:
            return infoTributaria(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ambiente(self):
        return self.ambiente
    def set_ambiente(self, ambiente):
        self.ambiente = ambiente
    def get_tipoEmision(self):
        return self.tipoEmision
    def set_tipoEmision(self, tipoEmision):
        self.tipoEmision = tipoEmision
    def get_razonSocial(self):
        return self.razonSocial
    def set_razonSocial(self, razonSocial):
        self.razonSocial = razonSocial
    def get_nombreComercial(self):
        return self.nombreComercial
    def set_nombreComercial(self, nombreComercial):
        self.nombreComercial = nombreComercial
    def get_ruc(self):
        return self.ruc
    def set_ruc(self, ruc):
        self.ruc = ruc
    def get_claveAcceso(self):
        return self.claveAcceso
    def set_claveAcceso(self, claveAcceso):
        self.claveAcceso = claveAcceso
    def get_codDoc(self):
        return self.codDoc
    def set_codDoc(self, codDoc):
        self.codDoc = codDoc
    def get_estab(self):
        return self.estab
    def set_estab(self, estab):
        self.estab = estab
    def get_ptoEmi(self):
        return self.ptoEmi
    def set_ptoEmi(self, ptoEmi):
        self.ptoEmi = ptoEmi
    def get_secuencial(self):
        return self.secuencial
    def set_secuencial(self, secuencial):
        self.secuencial = secuencial
    def get_dirMatriz(self):
        return self.dirMatriz
    def set_dirMatriz(self, dirMatriz):
        self.dirMatriz = dirMatriz
    def get_agenteRetencion(self):
        return self.agenteRetencion
    def set_agenteRetencion(self, agenteRetencion):
        self.agenteRetencion = agenteRetencion
    def get_contribuyenteRimpe(self):
        return self.contribuyenteRimpe
    def set_contribuyenteRimpe(self, contribuyenteRimpe):
        self.contribuyenteRimpe = contribuyenteRimpe
    def validate_ambiente(self, value):
        result = True
        # Validate type ambiente, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_ambiente_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ambiente_patterns_, ))
                result = False
        return result
    validate_ambiente_patterns_ = [['^([1-2]{1})$']]
    def validate_tipoEmision(self, value):
        result = True
        # Validate type tipoEmision, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_tipoEmision_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_tipoEmision_patterns_, ))
                result = False
        return result
    validate_tipoEmision_patterns_ = [['^([12]{1})$']]
    def validate_razonSocial(self, value):
        result = True
        # Validate type razonSocial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on razonSocial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on razonSocial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_razonSocial_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_razonSocial_patterns_, ))
                result = False
        return result
    validate_razonSocial_patterns_ = [['^([^\\n]*)$']]
    def validate_nombreComercial(self, value):
        result = True
        # Validate type nombreComercial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on nombreComercial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on nombreComercial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_nombreComercial_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_nombreComercial_patterns_, ))
                result = False
        return result
    validate_nombreComercial_patterns_ = [['^([^\\n]*)$']]
    def validate_numeroRuc(self, value):
        result = True
        # Validate type numeroRuc, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_numeroRuc_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_numeroRuc_patterns_, ))
                result = False
        return result
    validate_numeroRuc_patterns_ = [['^([0-9]{10}001)$']]
    def validate_claveAcceso(self, value):
        result = True
        # Validate type claveAcceso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_claveAcceso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_claveAcceso_patterns_, ))
                result = False
        return result
    validate_claveAcceso_patterns_ = [['^([0-9]{49})$']]
    def validate_codDoc(self, value):
        result = True
        # Validate type codDoc, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codDoc_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codDoc_patterns_, ))
                result = False
        return result
    validate_codDoc_patterns_ = [['^([0-9]{2})$']]
    def validate_establecimiento(self, value):
        result = True
        # Validate type establecimiento, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_establecimiento_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_establecimiento_patterns_, ))
                result = False
        return result
    validate_establecimiento_patterns_ = [['^([0-9]{3})$']]
    def validate_puntoEmision(self, value):
        result = True
        # Validate type puntoEmision, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_puntoEmision_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_puntoEmision_patterns_, ))
                result = False
        return result
    validate_puntoEmision_patterns_ = [['^([0-9]{3})$']]
    def validate_secuencial(self, value):
        result = True
        # Validate type secuencial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_secuencial_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_secuencial_patterns_, ))
                result = False
        return result
    validate_secuencial_patterns_ = [['^([0-9]{9})$']]
    def validate_dirMatriz(self, value):
        result = True
        # Validate type dirMatriz, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on dirMatriz' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on dirMatriz' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_dirMatriz_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_dirMatriz_patterns_, ))
                result = False
        return result
    validate_dirMatriz_patterns_ = [['^([^\\n]*)$']]
    def validate_agenteRetencion(self, value):
        result = True
        # Validate type agenteRetencion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on agenteRetencion' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_agenteRetencion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_agenteRetencion_patterns_, ))
                result = False
        return result
    validate_agenteRetencion_patterns_ = [['^([0-9]+)$']]
    def validate_contribuyenteRimpe(self, value):
        result = True
        # Validate type contribuyenteRimpe, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_contribuyenteRimpe_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_contribuyenteRimpe_patterns_, ))
                result = False
        return result
    validate_contribuyenteRimpe_patterns_ = [['^(CONTRIBUYENTE RÉGIMEN RIMPE)$']]
    def has__content(self):
        if (
            self.ambiente is not None or
            self.tipoEmision is not None or
            self.razonSocial is not None or
            self.nombreComercial is not None or
            self.ruc is not None or
            self.claveAcceso is not None or
            self.codDoc is not None or
            self.estab is not None or
            self.ptoEmi is not None or
            self.secuencial is not None or
            self.dirMatriz is not None or
            self.agenteRetencion is not None or
            self.contribuyenteRimpe is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoTributaria', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoTributaria')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoTributaria':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoTributaria')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoTributaria', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoTributaria'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoTributaria', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ambiente is not None:
            namespaceprefix_ = self.ambiente_nsprefix_ + ':' if (UseCapturedNS_ and self.ambiente_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sambiente>%s</%sambiente>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ambiente), input_name='ambiente')), namespaceprefix_ , eol_))
        if self.tipoEmision is not None:
            namespaceprefix_ = self.tipoEmision_nsprefix_ + ':' if (UseCapturedNS_ and self.tipoEmision_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoEmision>%s</%stipoEmision>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tipoEmision), input_name='tipoEmision')), namespaceprefix_ , eol_))
        if self.razonSocial is not None:
            namespaceprefix_ = self.razonSocial_nsprefix_ + ':' if (UseCapturedNS_ and self.razonSocial_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srazonSocial>%s</%srazonSocial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.razonSocial), input_name='razonSocial')), namespaceprefix_ , eol_))
        if self.nombreComercial is not None:
            namespaceprefix_ = self.nombreComercial_nsprefix_ + ':' if (UseCapturedNS_ and self.nombreComercial_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snombreComercial>%s</%snombreComercial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nombreComercial), input_name='nombreComercial')), namespaceprefix_ , eol_))
        if self.ruc is not None:
            namespaceprefix_ = self.ruc_nsprefix_ + ':' if (UseCapturedNS_ and self.ruc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sruc>%s</%sruc>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ruc), input_name='ruc')), namespaceprefix_ , eol_))
        if self.claveAcceso is not None:
            namespaceprefix_ = self.claveAcceso_nsprefix_ + ':' if (UseCapturedNS_ and self.claveAcceso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclaveAcceso>%s</%sclaveAcceso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.claveAcceso), input_name='claveAcceso')), namespaceprefix_ , eol_))
        if self.codDoc is not None:
            namespaceprefix_ = self.codDoc_nsprefix_ + ':' if (UseCapturedNS_ and self.codDoc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodDoc>%s</%scodDoc>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codDoc), input_name='codDoc')), namespaceprefix_ , eol_))
        if self.estab is not None:
            namespaceprefix_ = self.estab_nsprefix_ + ':' if (UseCapturedNS_ and self.estab_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sestab>%s</%sestab>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.estab), input_name='estab')), namespaceprefix_ , eol_))
        if self.ptoEmi is not None:
            namespaceprefix_ = self.ptoEmi_nsprefix_ + ':' if (UseCapturedNS_ and self.ptoEmi_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sptoEmi>%s</%sptoEmi>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ptoEmi), input_name='ptoEmi')), namespaceprefix_ , eol_))
        if self.secuencial is not None:
            namespaceprefix_ = self.secuencial_nsprefix_ + ':' if (UseCapturedNS_ and self.secuencial_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssecuencial>%s</%ssecuencial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.secuencial), input_name='secuencial')), namespaceprefix_ , eol_))
        if self.dirMatriz is not None:
            namespaceprefix_ = self.dirMatriz_nsprefix_ + ':' if (UseCapturedNS_ and self.dirMatriz_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdirMatriz>%s</%sdirMatriz>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dirMatriz), input_name='dirMatriz')), namespaceprefix_ , eol_))
        if self.agenteRetencion is not None:
            namespaceprefix_ = self.agenteRetencion_nsprefix_ + ':' if (UseCapturedNS_ and self.agenteRetencion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sagenteRetencion>%s</%sagenteRetencion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.agenteRetencion), input_name='agenteRetencion')), namespaceprefix_ , eol_))
        if self.contribuyenteRimpe is not None:
            namespaceprefix_ = self.contribuyenteRimpe_nsprefix_ + ':' if (UseCapturedNS_ and self.contribuyenteRimpe_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontribuyenteRimpe>%s</%scontribuyenteRimpe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contribuyenteRimpe), input_name='contribuyenteRimpe')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ambiente':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ambiente')
            value_ = self.gds_validate_string(value_, node, 'ambiente')
            self.ambiente = value_
            self.ambiente_nsprefix_ = child_.prefix
            # validate type ambiente
            self.validate_ambiente(self.ambiente)
        elif nodeName_ == 'tipoEmision':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'tipoEmision')
            value_ = self.gds_validate_string(value_, node, 'tipoEmision')
            self.tipoEmision = value_
            self.tipoEmision_nsprefix_ = child_.prefix
            # validate type tipoEmision
            self.validate_tipoEmision(self.tipoEmision)
        elif nodeName_ == 'razonSocial':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'razonSocial')
            value_ = self.gds_validate_string(value_, node, 'razonSocial')
            self.razonSocial = value_
            self.razonSocial_nsprefix_ = child_.prefix
            # validate type razonSocial
            self.validate_razonSocial(self.razonSocial)
        elif nodeName_ == 'nombreComercial':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nombreComercial')
            value_ = self.gds_validate_string(value_, node, 'nombreComercial')
            self.nombreComercial = value_
            self.nombreComercial_nsprefix_ = child_.prefix
            # validate type nombreComercial
            self.validate_nombreComercial(self.nombreComercial)
        elif nodeName_ == 'ruc':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ruc')
            value_ = self.gds_validate_string(value_, node, 'ruc')
            self.ruc = value_
            self.ruc_nsprefix_ = child_.prefix
            # validate type numeroRuc
            self.validate_numeroRuc(self.ruc)
        elif nodeName_ == 'claveAcceso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'claveAcceso')
            value_ = self.gds_validate_string(value_, node, 'claveAcceso')
            self.claveAcceso = value_
            self.claveAcceso_nsprefix_ = child_.prefix
            # validate type claveAcceso
            self.validate_claveAcceso(self.claveAcceso)
        elif nodeName_ == 'codDoc':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codDoc')
            value_ = self.gds_validate_string(value_, node, 'codDoc')
            self.codDoc = value_
            self.codDoc_nsprefix_ = child_.prefix
            # validate type codDoc
            self.validate_codDoc(self.codDoc)
        elif nodeName_ == 'estab':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'estab')
            value_ = self.gds_validate_string(value_, node, 'estab')
            self.estab = value_
            self.estab_nsprefix_ = child_.prefix
            # validate type establecimiento
            self.validate_establecimiento(self.estab)
        elif nodeName_ == 'ptoEmi':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ptoEmi')
            value_ = self.gds_validate_string(value_, node, 'ptoEmi')
            self.ptoEmi = value_
            self.ptoEmi_nsprefix_ = child_.prefix
            # validate type puntoEmision
            self.validate_puntoEmision(self.ptoEmi)
        elif nodeName_ == 'secuencial':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'secuencial')
            value_ = self.gds_validate_string(value_, node, 'secuencial')
            self.secuencial = value_
            self.secuencial_nsprefix_ = child_.prefix
            # validate type secuencial
            self.validate_secuencial(self.secuencial)
        elif nodeName_ == 'dirMatriz':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dirMatriz')
            value_ = self.gds_validate_string(value_, node, 'dirMatriz')
            self.dirMatriz = value_
            self.dirMatriz_nsprefix_ = child_.prefix
            # validate type dirMatriz
            self.validate_dirMatriz(self.dirMatriz)
        elif nodeName_ == 'agenteRetencion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'agenteRetencion')
            value_ = self.gds_validate_string(value_, node, 'agenteRetencion')
            self.agenteRetencion = value_
            self.agenteRetencion_nsprefix_ = child_.prefix
            # validate type agenteRetencion
            self.validate_agenteRetencion(self.agenteRetencion)
        elif nodeName_ == 'contribuyenteRimpe':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contribuyenteRimpe')
            value_ = self.gds_validate_string(value_, node, 'contribuyenteRimpe')
            self.contribuyenteRimpe = value_
            self.contribuyenteRimpe_nsprefix_ = child_.prefix
            # validate type contribuyenteRimpe
            self.validate_contribuyenteRimpe(self.contribuyenteRimpe)
# end class infoTributaria


class pagos(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, pago=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if pago is None:
            self.pago = []
        else:
            self.pago = pago
        self.pago_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pagos)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pagos.subclass:
            return pagos.subclass(*args_, **kwargs_)
        else:
            return pagos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_pago(self):
        return self.pago
    def set_pago(self, pago):
        self.pago = pago
    def add_pago(self, value):
        self.pago.append(value)
    def insert_pago_at(self, index, value):
        self.pago.insert(index, value)
    def replace_pago_at(self, index, value):
        self.pago[index] = value
    def has__content(self):
        if (
            self.pago
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='pagos', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pagos')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'pagos':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='pagos')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='pagos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='pagos'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='pagos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for pago_ in self.pago:
            namespaceprefix_ = self.pago_nsprefix_ + ':' if (UseCapturedNS_ and self.pago_nsprefix_) else ''
            pago_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='pago', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'pago':
            obj_ = pagoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.pago.append(obj_)
            obj_.original_tagname_ = 'pago'
# end class pagos


class maquinaFiscal(GeneratedsSuper):
    """maquinaFiscal -- Contiene la informacion de las maquinas fiscales
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, marca=None, modelo=None, serie=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.marca = marca
        self.validate_cadenaTreinta(self.marca)
        self.marca_nsprefix_ = None
        self.modelo = modelo
        self.validate_cadenaTreinta(self.modelo)
        self.modelo_nsprefix_ = None
        self.serie = serie
        self.validate_cadenaTreinta(self.serie)
        self.serie_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, maquinaFiscal)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if maquinaFiscal.subclass:
            return maquinaFiscal.subclass(*args_, **kwargs_)
        else:
            return maquinaFiscal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_marca(self):
        return self.marca
    def set_marca(self, marca):
        self.marca = marca
    def get_modelo(self):
        return self.modelo
    def set_modelo(self, modelo):
        self.modelo = modelo
    def get_serie(self):
        return self.serie
    def set_serie(self, serie):
        self.serie = serie
    def validate_cadenaTreinta(self, value):
        result = True
        # Validate type cadenaTreinta, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 30:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on cadenaTreinta' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on cadenaTreinta' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_cadenaTreinta_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_cadenaTreinta_patterns_, ))
                result = False
        return result
    validate_cadenaTreinta_patterns_ = [['^([^\\n]*)$']]
    def has__content(self):
        if (
            self.marca is not None or
            self.modelo is not None or
            self.serie is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='maquinaFiscal', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('maquinaFiscal')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'maquinaFiscal':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='maquinaFiscal')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='maquinaFiscal', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='maquinaFiscal'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='maquinaFiscal', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.marca is not None:
            namespaceprefix_ = self.marca_nsprefix_ + ':' if (UseCapturedNS_ and self.marca_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smarca>%s</%smarca>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.marca), input_name='marca')), namespaceprefix_ , eol_))
        if self.modelo is not None:
            namespaceprefix_ = self.modelo_nsprefix_ + ':' if (UseCapturedNS_ and self.modelo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodelo>%s</%smodelo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modelo), input_name='modelo')), namespaceprefix_ , eol_))
        if self.serie is not None:
            namespaceprefix_ = self.serie_nsprefix_ + ':' if (UseCapturedNS_ and self.serie_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserie>%s</%sserie>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serie), input_name='serie')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'marca':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'marca')
            value_ = self.gds_validate_string(value_, node, 'marca')
            self.marca = value_
            self.marca_nsprefix_ = child_.prefix
            # validate type cadenaTreinta
            self.validate_cadenaTreinta(self.marca)
        elif nodeName_ == 'modelo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modelo')
            value_ = self.gds_validate_string(value_, node, 'modelo')
            self.modelo = value_
            self.modelo_nsprefix_ = child_.prefix
            # validate type cadenaTreinta
            self.validate_cadenaTreinta(self.modelo)
        elif nodeName_ == 'serie':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serie')
            value_ = self.gds_validate_string(value_, node, 'serie')
            self.serie = value_
            self.serie_nsprefix_ = child_.prefix
            # validate type cadenaTreinta
            self.validate_cadenaTreinta(self.serie)
# end class maquinaFiscal


class impuesto(GeneratedsSuper):
    """impuesto -- Contiene la informacion de los impuestos
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codigo=None, codigoPorcentaje=None, tarifa=None, baseImponible=None, valor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codigo = codigo
        self.validate_codigo(self.codigo)
        self.codigo_nsprefix_ = None
        self.codigoPorcentaje = codigoPorcentaje
        self.validate_codigoPorcentaje(self.codigoPorcentaje)
        self.codigoPorcentaje_nsprefix_ = None
        self.tarifa = tarifa
        self.validate_tarifa(self.tarifa)
        self.tarifa_nsprefix_ = None
        self.baseImponible = baseImponible
        self.validate_baseImponible(self.baseImponible)
        self.baseImponible_nsprefix_ = None
        self.valor = valor
        self.validate_valor(self.valor)
        self.valor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, impuesto)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if impuesto.subclass:
            return impuesto.subclass(*args_, **kwargs_)
        else:
            return impuesto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codigo(self):
        return self.codigo
    def set_codigo(self, codigo):
        self.codigo = codigo
    def get_codigoPorcentaje(self):
        return self.codigoPorcentaje
    def set_codigoPorcentaje(self, codigoPorcentaje):
        self.codigoPorcentaje = codigoPorcentaje
    def get_tarifa(self):
        return self.tarifa
    def set_tarifa(self, tarifa):
        self.tarifa = tarifa
    def get_baseImponible(self):
        return self.baseImponible
    def set_baseImponible(self, baseImponible):
        self.baseImponible = baseImponible
    def get_valor(self):
        return self.valor
    def set_valor(self, valor):
        self.valor = valor
    def validate_codigo(self, value):
        result = True
        # Validate type codigo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on codigo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on codigo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigo_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigo_patterns_, ))
                result = False
        return result
    validate_codigo_patterns_ = [['^([235])$']]
    def validate_codigoPorcentaje(self, value):
        result = True
        # Validate type codigoPorcentaje, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on codigoPorcentaje' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on codigoPorcentaje' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoPorcentaje_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoPorcentaje_patterns_, ))
                result = False
        return result
    validate_codigoPorcentaje_patterns_ = [['^([0-9]+)$']]
    def validate_tarifa(self, value):
        result = True
        # Validate type tarifa, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_baseImponible(self, value):
        result = True
        # Validate type baseImponible, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on baseImponible' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on baseImponible' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_valor(self, value):
        result = True
        # Validate type valor, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valor' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valor' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.codigo is not None or
            self.codigoPorcentaje is not None or
            self.tarifa is not None or
            self.baseImponible is not None or
            self.valor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='impuesto', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('impuesto')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'impuesto':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='impuesto')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='impuesto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='impuesto'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='impuesto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigo is not None:
            namespaceprefix_ = self.codigo_nsprefix_ + ':' if (UseCapturedNS_ and self.codigo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigo>%s</%scodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigo), input_name='codigo')), namespaceprefix_ , eol_))
        if self.codigoPorcentaje is not None:
            namespaceprefix_ = self.codigoPorcentaje_nsprefix_ + ':' if (UseCapturedNS_ and self.codigoPorcentaje_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPorcentaje>%s</%scodigoPorcentaje>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigoPorcentaje), input_name='codigoPorcentaje')), namespaceprefix_ , eol_))
        if self.tarifa is not None:
            namespaceprefix_ = self.tarifa_nsprefix_ + ':' if (UseCapturedNS_ and self.tarifa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%starifa>%s</%starifa>%s' % (namespaceprefix_ , self.gds_format_decimal(self.tarifa, input_name='tarifa'), namespaceprefix_ , eol_))
        if self.baseImponible is not None:
            namespaceprefix_ = self.baseImponible_nsprefix_ + ':' if (UseCapturedNS_ and self.baseImponible_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbaseImponible>%s</%sbaseImponible>%s' % (namespaceprefix_ , self.gds_format_decimal(self.baseImponible, input_name='baseImponible'), namespaceprefix_ , eol_))
        if self.valor is not None:
            namespaceprefix_ = self.valor_nsprefix_ + ':' if (UseCapturedNS_ and self.valor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalor>%s</%svalor>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valor, input_name='valor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codigo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigo')
            value_ = self.gds_validate_string(value_, node, 'codigo')
            self.codigo = value_
            self.codigo_nsprefix_ = child_.prefix
            # validate type codigo
            self.validate_codigo(self.codigo)
        elif nodeName_ == 'codigoPorcentaje':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigoPorcentaje')
            value_ = self.gds_validate_string(value_, node, 'codigoPorcentaje')
            self.codigoPorcentaje = value_
            self.codigoPorcentaje_nsprefix_ = child_.prefix
            # validate type codigoPorcentaje
            self.validate_codigoPorcentaje(self.codigoPorcentaje)
        elif nodeName_ == 'tarifa' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'tarifa')
            fval_ = self.gds_validate_decimal(fval_, node, 'tarifa')
            self.tarifa = fval_
            self.tarifa_nsprefix_ = child_.prefix
            # validate type tarifa
            self.validate_tarifa(self.tarifa)
        elif nodeName_ == 'baseImponible' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'baseImponible')
            fval_ = self.gds_validate_decimal(fval_, node, 'baseImponible')
            self.baseImponible = fval_
            self.baseImponible_nsprefix_ = child_.prefix
            # validate type baseImponible
            self.validate_baseImponible(self.baseImponible)
        elif nodeName_ == 'valor' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valor')
            fval_ = self.gds_validate_decimal(fval_, node, 'valor')
            self.valor = fval_
            self.valor_nsprefix_ = child_.prefix
            # validate type valor
            self.validate_valor(self.valor)
# end class impuesto


class destino(GeneratedsSuper):
    """destino -- Contiene la informacion del destinatario
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, motivoTraslado=None, docAduaneroUnico=None, codEstabDestino=None, ruta=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.motivoTraslado = motivoTraslado
        self.validate_motivoTraslado(self.motivoTraslado)
        self.motivoTraslado_nsprefix_ = None
        self.docAduaneroUnico = docAduaneroUnico
        self.validate_docAduaneroUnico(self.docAduaneroUnico)
        self.docAduaneroUnico_nsprefix_ = None
        self.codEstabDestino = codEstabDestino
        self.validate_establecimiento(self.codEstabDestino)
        self.codEstabDestino_nsprefix_ = None
        self.ruta = ruta
        self.validate_ruta(self.ruta)
        self.ruta_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, destino)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if destino.subclass:
            return destino.subclass(*args_, **kwargs_)
        else:
            return destino(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_motivoTraslado(self):
        return self.motivoTraslado
    def set_motivoTraslado(self, motivoTraslado):
        self.motivoTraslado = motivoTraslado
    def get_docAduaneroUnico(self):
        return self.docAduaneroUnico
    def set_docAduaneroUnico(self, docAduaneroUnico):
        self.docAduaneroUnico = docAduaneroUnico
    def get_codEstabDestino(self):
        return self.codEstabDestino
    def set_codEstabDestino(self, codEstabDestino):
        self.codEstabDestino = codEstabDestino
    def get_ruta(self):
        return self.ruta
    def set_ruta(self, ruta):
        self.ruta = ruta
    def validate_motivoTraslado(self, value):
        result = True
        # Validate type motivoTraslado, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on motivoTraslado' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on motivoTraslado' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_motivoTraslado_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_motivoTraslado_patterns_, ))
                result = False
        return result
    validate_motivoTraslado_patterns_ = [['^([^\\n]*)$']]
    def validate_docAduaneroUnico(self, value):
        result = True
        # Validate type docAduaneroUnico, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 64:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on docAduaneroUnico' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on docAduaneroUnico' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_docAduaneroUnico_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_docAduaneroUnico_patterns_, ))
                result = False
        return result
    validate_docAduaneroUnico_patterns_ = [['^([^\\n]*)$']]
    def validate_establecimiento(self, value):
        result = True
        # Validate type establecimiento, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_establecimiento_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_establecimiento_patterns_, ))
                result = False
        return result
    validate_establecimiento_patterns_ = [['^([0-9]{3})$']]
    def validate_ruta(self, value):
        result = True
        # Validate type ruta, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ruta' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ruta' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_ruta_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ruta_patterns_, ))
                result = False
        return result
    validate_ruta_patterns_ = [['^([^\\n]*)$']]
    def has__content(self):
        if (
            self.motivoTraslado is not None or
            self.docAduaneroUnico is not None or
            self.codEstabDestino is not None or
            self.ruta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='destino', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('destino')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'destino':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='destino')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='destino', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='destino'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='destino', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.motivoTraslado is not None:
            namespaceprefix_ = self.motivoTraslado_nsprefix_ + ':' if (UseCapturedNS_ and self.motivoTraslado_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smotivoTraslado>%s</%smotivoTraslado>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.motivoTraslado), input_name='motivoTraslado')), namespaceprefix_ , eol_))
        if self.docAduaneroUnico is not None:
            namespaceprefix_ = self.docAduaneroUnico_nsprefix_ + ':' if (UseCapturedNS_ and self.docAduaneroUnico_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdocAduaneroUnico>%s</%sdocAduaneroUnico>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.docAduaneroUnico), input_name='docAduaneroUnico')), namespaceprefix_ , eol_))
        if self.codEstabDestino is not None:
            namespaceprefix_ = self.codEstabDestino_nsprefix_ + ':' if (UseCapturedNS_ and self.codEstabDestino_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodEstabDestino>%s</%scodEstabDestino>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codEstabDestino), input_name='codEstabDestino')), namespaceprefix_ , eol_))
        if self.ruta is not None:
            namespaceprefix_ = self.ruta_nsprefix_ + ':' if (UseCapturedNS_ and self.ruta_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sruta>%s</%sruta>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ruta), input_name='ruta')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'motivoTraslado':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'motivoTraslado')
            value_ = self.gds_validate_string(value_, node, 'motivoTraslado')
            self.motivoTraslado = value_
            self.motivoTraslado_nsprefix_ = child_.prefix
            # validate type motivoTraslado
            self.validate_motivoTraslado(self.motivoTraslado)
        elif nodeName_ == 'docAduaneroUnico':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'docAduaneroUnico')
            value_ = self.gds_validate_string(value_, node, 'docAduaneroUnico')
            self.docAduaneroUnico = value_
            self.docAduaneroUnico_nsprefix_ = child_.prefix
            # validate type docAduaneroUnico
            self.validate_docAduaneroUnico(self.docAduaneroUnico)
        elif nodeName_ == 'codEstabDestino':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codEstabDestino')
            value_ = self.gds_validate_string(value_, node, 'codEstabDestino')
            self.codEstabDestino = value_
            self.codEstabDestino_nsprefix_ = child_.prefix
            # validate type establecimiento
            self.validate_establecimiento(self.codEstabDestino)
        elif nodeName_ == 'ruta':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ruta')
            value_ = self.gds_validate_string(value_, node, 'ruta')
            self.ruta = value_
            self.ruta_nsprefix_ = child_.prefix
            # validate type ruta
            self.validate_ruta(self.ruta)
# end class destino


class rubro(GeneratedsSuper):
    """rubro -- Contiene la informacion del rubro
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, concepto=None, total=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.concepto = concepto
        self.validate_concepto(self.concepto)
        self.concepto_nsprefix_ = None
        self.total = total
        self.validate_total(self.total)
        self.total_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rubro)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rubro.subclass:
            return rubro.subclass(*args_, **kwargs_)
        else:
            return rubro(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_concepto(self):
        return self.concepto
    def set_concepto(self, concepto):
        self.concepto = concepto
    def get_total(self):
        return self.total
    def set_total(self, total):
        self.total = total
    def validate_concepto(self, value):
        result = True
        # Validate type concepto, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on concepto' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on concepto' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_concepto_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_concepto_patterns_, ))
                result = False
        return result
    validate_concepto_patterns_ = [['^([^\\n]*)$']]
    def validate_total(self, value):
        result = True
        # Validate type total, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on total' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on total' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.concepto is not None or
            self.total is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='rubro', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rubro')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'rubro':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='rubro')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='rubro', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='rubro'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='rubro', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.concepto is not None:
            namespaceprefix_ = self.concepto_nsprefix_ + ':' if (UseCapturedNS_ and self.concepto_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sconcepto>%s</%sconcepto>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.concepto), input_name='concepto')), namespaceprefix_ , eol_))
        if self.total is not None:
            namespaceprefix_ = self.total_nsprefix_ + ':' if (UseCapturedNS_ and self.total_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotal>%s</%stotal>%s' % (namespaceprefix_ , self.gds_format_decimal(self.total, input_name='total'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'concepto':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'concepto')
            value_ = self.gds_validate_string(value_, node, 'concepto')
            self.concepto = value_
            self.concepto_nsprefix_ = child_.prefix
            # validate type concepto
            self.validate_concepto(self.concepto)
        elif nodeName_ == 'total' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'total')
            fval_ = self.gds_validate_decimal(fval_, node, 'total')
            self.total = fval_
            self.total_nsprefix_ = child_.prefix
            # validate type total
            self.validate_total(self.total)
# end class rubro


class detalleImpuestos(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, detalleImpuesto=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if detalleImpuesto is None:
            self.detalleImpuesto = []
        else:
            self.detalleImpuesto = detalleImpuesto
        self.detalleImpuesto_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detalleImpuestos)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detalleImpuestos.subclass:
            return detalleImpuestos.subclass(*args_, **kwargs_)
        else:
            return detalleImpuestos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_detalleImpuesto(self):
        return self.detalleImpuesto
    def set_detalleImpuesto(self, detalleImpuesto):
        self.detalleImpuesto = detalleImpuesto
    def add_detalleImpuesto(self, value):
        self.detalleImpuesto.append(value)
    def insert_detalleImpuesto_at(self, index, value):
        self.detalleImpuesto.insert(index, value)
    def replace_detalleImpuesto_at(self, index, value):
        self.detalleImpuesto[index] = value
    def has__content(self):
        if (
            self.detalleImpuesto
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detalleImpuestos', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detalleImpuestos')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detalleImpuestos':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detalleImpuestos')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detalleImpuestos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detalleImpuestos'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detalleImpuestos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for detalleImpuesto_ in self.detalleImpuesto:
            namespaceprefix_ = self.detalleImpuesto_nsprefix_ + ':' if (UseCapturedNS_ and self.detalleImpuesto_nsprefix_) else ''
            detalleImpuesto_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detalleImpuesto', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'detalleImpuesto':
            obj_ = detalleImpuestoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detalleImpuesto.append(obj_)
            obj_.original_tagname_ = 'detalleImpuesto'
# end class detalleImpuestos


class compensacion(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codigo=None, tarifa=None, valor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codigo = codigo
        self.validate_codigoPorcentajeCompensacion(self.codigo)
        self.codigo_nsprefix_ = None
        self.tarifa = tarifa
        self.validate_tarifa(self.tarifa)
        self.tarifa_nsprefix_ = None
        self.valor = valor
        self.validate_valor(self.valor)
        self.valor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, compensacion)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if compensacion.subclass:
            return compensacion.subclass(*args_, **kwargs_)
        else:
            return compensacion(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codigo(self):
        return self.codigo
    def set_codigo(self, codigo):
        self.codigo = codigo
    def get_tarifa(self):
        return self.tarifa
    def set_tarifa(self, tarifa):
        self.tarifa = tarifa
    def get_valor(self):
        return self.valor
    def set_valor(self, valor):
        self.valor = valor
    def validate_codigoPorcentajeCompensacion(self, value):
        result = True
        # Validate type codigoPorcentajeCompensacion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoPorcentajeCompensacion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoPorcentajeCompensacion_patterns_, ))
                result = False
        return result
    validate_codigoPorcentajeCompensacion_patterns_ = [['^(1)$']]
    def validate_tarifa(self, value):
        result = True
        # Validate type tarifa, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_valor(self, value):
        result = True
        # Validate type valor, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valor' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valor' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.codigo is not None or
            self.tarifa is not None or
            self.valor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='compensacion', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('compensacion')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'compensacion':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='compensacion')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='compensacion', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='compensacion'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='compensacion', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigo is not None:
            namespaceprefix_ = self.codigo_nsprefix_ + ':' if (UseCapturedNS_ and self.codigo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigo>%s</%scodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigo), input_name='codigo')), namespaceprefix_ , eol_))
        if self.tarifa is not None:
            namespaceprefix_ = self.tarifa_nsprefix_ + ':' if (UseCapturedNS_ and self.tarifa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%starifa>%s</%starifa>%s' % (namespaceprefix_ , self.gds_format_decimal(self.tarifa, input_name='tarifa'), namespaceprefix_ , eol_))
        if self.valor is not None:
            namespaceprefix_ = self.valor_nsprefix_ + ':' if (UseCapturedNS_ and self.valor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalor>%s</%svalor>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valor, input_name='valor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codigo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigo')
            value_ = self.gds_validate_string(value_, node, 'codigo')
            self.codigo = value_
            self.codigo_nsprefix_ = child_.prefix
            # validate type codigoPorcentajeCompensacion
            self.validate_codigoPorcentajeCompensacion(self.codigo)
        elif nodeName_ == 'tarifa' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'tarifa')
            fval_ = self.gds_validate_decimal(fval_, node, 'tarifa')
            self.tarifa = fval_
            self.tarifa_nsprefix_ = child_.prefix
            # validate type tarifa
            self.validate_tarifa(self.tarifa)
        elif nodeName_ == 'valor' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valor')
            fval_ = self.gds_validate_decimal(fval_, node, 'valor')
            self.valor = fval_
            self.valor_nsprefix_ = child_.prefix
            # validate type valor
            self.validate_valor(self.valor)
# end class compensacion


class tipoNegociable(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, correo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.correo = correo
        self.validate_correo(self.correo)
        self.correo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tipoNegociable)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tipoNegociable.subclass:
            return tipoNegociable.subclass(*args_, **kwargs_)
        else:
            return tipoNegociable(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_correo(self):
        return self.correo
    def set_correo(self, correo):
        self.correo = correo
    def validate_correo(self, value):
        result = True
        # Validate type correo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on correo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on correo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_correo_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_correo_patterns_, ))
                result = False
        return result
    validate_correo_patterns_ = [['^([^\\n]*)$']]
    def has__content(self):
        if (
            self.correo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='tipoNegociable', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tipoNegociable')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'tipoNegociable':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tipoNegociable')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tipoNegociable', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tipoNegociable'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='tipoNegociable', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.correo is not None:
            namespaceprefix_ = self.correo_nsprefix_ + ':' if (UseCapturedNS_ and self.correo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scorreo>%s</%scorreo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.correo), input_name='correo')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'correo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'correo')
            value_ = self.gds_validate_string(value_, node, 'correo')
            self.correo = value_
            self.correo_nsprefix_ = child_.prefix
            # validate type correo
            self.validate_correo(self.correo)
# end class tipoNegociable


class compensaciones(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, compensacion=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if compensacion is None:
            self.compensacion = []
        else:
            self.compensacion = compensacion
        self.compensacion_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, compensaciones)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if compensaciones.subclass:
            return compensaciones.subclass(*args_, **kwargs_)
        else:
            return compensaciones(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_compensacion(self):
        return self.compensacion
    def set_compensacion(self, compensacion):
        self.compensacion = compensacion
    def add_compensacion(self, value):
        self.compensacion.append(value)
    def insert_compensacion_at(self, index, value):
        self.compensacion.insert(index, value)
    def replace_compensacion_at(self, index, value):
        self.compensacion[index] = value
    def has__content(self):
        if (
            self.compensacion
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='compensaciones', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('compensaciones')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'compensaciones':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='compensaciones')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='compensaciones', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='compensaciones'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='compensaciones', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for compensacion_ in self.compensacion:
            namespaceprefix_ = self.compensacion_nsprefix_ + ':' if (UseCapturedNS_ and self.compensacion_nsprefix_) else ''
            compensacion_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='compensacion', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'compensacion':
            obj_ = compensacion.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.compensacion.append(obj_)
            obj_.original_tagname_ = 'compensacion'
# end class compensaciones


class compensacionesReembolso(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, compensacionReembolso=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if compensacionReembolso is None:
            self.compensacionReembolso = []
        else:
            self.compensacionReembolso = compensacionReembolso
        self.compensacionReembolso_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, compensacionesReembolso)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if compensacionesReembolso.subclass:
            return compensacionesReembolso.subclass(*args_, **kwargs_)
        else:
            return compensacionesReembolso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_compensacionReembolso(self):
        return self.compensacionReembolso
    def set_compensacionReembolso(self, compensacionReembolso):
        self.compensacionReembolso = compensacionReembolso
    def add_compensacionReembolso(self, value):
        self.compensacionReembolso.append(value)
    def insert_compensacionReembolso_at(self, index, value):
        self.compensacionReembolso.insert(index, value)
    def replace_compensacionReembolso_at(self, index, value):
        self.compensacionReembolso[index] = value
    def has__content(self):
        if (
            self.compensacionReembolso
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='compensacionesReembolso', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('compensacionesReembolso')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'compensacionesReembolso':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='compensacionesReembolso')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='compensacionesReembolso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='compensacionesReembolso'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='compensacionesReembolso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for compensacionReembolso_ in self.compensacionReembolso:
            namespaceprefix_ = self.compensacionReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.compensacionReembolso_nsprefix_) else ''
            compensacionReembolso_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='compensacionReembolso', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'compensacionReembolso':
            obj_ = compensacion.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.compensacionReembolso.append(obj_)
            obj_.original_tagname_ = 'compensacionReembolso'
# end class compensacionesReembolso


class reembolsos(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, reembolsoDetalle=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if reembolsoDetalle is None:
            self.reembolsoDetalle = []
        else:
            self.reembolsoDetalle = reembolsoDetalle
        self.reembolsoDetalle_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, reembolsos)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if reembolsos.subclass:
            return reembolsos.subclass(*args_, **kwargs_)
        else:
            return reembolsos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_reembolsoDetalle(self):
        return self.reembolsoDetalle
    def set_reembolsoDetalle(self, reembolsoDetalle):
        self.reembolsoDetalle = reembolsoDetalle
    def add_reembolsoDetalle(self, value):
        self.reembolsoDetalle.append(value)
    def insert_reembolsoDetalle_at(self, index, value):
        self.reembolsoDetalle.insert(index, value)
    def replace_reembolsoDetalle_at(self, index, value):
        self.reembolsoDetalle[index] = value
    def has__content(self):
        if (
            self.reembolsoDetalle
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='reembolsos', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('reembolsos')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'reembolsos':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='reembolsos')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='reembolsos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='reembolsos'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='reembolsos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for reembolsoDetalle_ in self.reembolsoDetalle:
            namespaceprefix_ = self.reembolsoDetalle_nsprefix_ + ':' if (UseCapturedNS_ and self.reembolsoDetalle_nsprefix_) else ''
            reembolsoDetalle_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='reembolsoDetalle', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'reembolsoDetalle':
            obj_ = reembolsoDetalleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.reembolsoDetalle.append(obj_)
            obj_.original_tagname_ = 'reembolsoDetalle'
# end class reembolsos


class factura(GeneratedsSuper):

    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, id=None, version=None, infoTributaria=None, infoFactura=None, detalles=None, reembolsos=None, retenciones=None, infoSustitutivaGuiaRemision=None, otrosRubrosTerceros=None, tipoNegociable=None, maquinaFiscal=None, infoAdicional=None, Signature=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.id = _cast(None, id)
        self.id_nsprefix_ = None
        self.version = _cast(None, version)
        self.version_nsprefix_ = None
        self.infoTributaria = infoTributaria
        self.infoTributaria_nsprefix_ = None
        self.infoFactura = infoFactura
        self.infoFactura_nsprefix_ = None
        self.detalles = detalles
        self.detalles_nsprefix_ = None
        self.reembolsos = reembolsos
        self.reembolsos_nsprefix_ = None
        self.retenciones = retenciones
        self.retenciones_nsprefix_ = None
        self.infoSustitutivaGuiaRemision = infoSustitutivaGuiaRemision
        self.infoSustitutivaGuiaRemision_nsprefix_ = None
        self.otrosRubrosTerceros = otrosRubrosTerceros
        self.otrosRubrosTerceros_nsprefix_ = None
        self.tipoNegociable = tipoNegociable
        self.tipoNegociable_nsprefix_ = None
        self.maquinaFiscal = maquinaFiscal
        self.maquinaFiscal_nsprefix_ = None
        self.infoAdicional = infoAdicional
        self.infoAdicional_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, factura)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if factura.subclass:
            return factura.subclass(*args_, **kwargs_)
        else:
            return factura(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_infoTributaria(self):
        return self.infoTributaria
    def set_infoTributaria(self, infoTributaria):
        self.infoTributaria = infoTributaria
    def get_infoFactura(self):
        return self.infoFactura
    def set_infoFactura(self, infoFactura):
        self.infoFactura = infoFactura
    def get_detalles(self):
        return self.detalles
    def set_detalles(self, detalles):
        self.detalles = detalles
    def get_reembolsos(self):
        return self.reembolsos
    def set_reembolsos(self, reembolsos):
        self.reembolsos = reembolsos
    def get_retenciones(self):
        return self.retenciones
    def set_retenciones(self, retenciones):
        self.retenciones = retenciones
    def get_infoSustitutivaGuiaRemision(self):
        return self.infoSustitutivaGuiaRemision
    def set_infoSustitutivaGuiaRemision(self, infoSustitutivaGuiaRemision):
        self.infoSustitutivaGuiaRemision = infoSustitutivaGuiaRemision
    def get_otrosRubrosTerceros(self):
        return self.otrosRubrosTerceros
    def set_otrosRubrosTerceros(self, otrosRubrosTerceros):
        self.otrosRubrosTerceros = otrosRubrosTerceros
    def get_tipoNegociable(self):
        return self.tipoNegociable
    def set_tipoNegociable(self, tipoNegociable):
        self.tipoNegociable = tipoNegociable
    def get_maquinaFiscal(self):
        return self.maquinaFiscal
    def set_maquinaFiscal(self, maquinaFiscal):
        self.maquinaFiscal = maquinaFiscal
    def get_infoAdicional(self):
        return self.infoAdicional
    def set_infoAdicional(self, infoAdicional):
        self.infoAdicional = infoAdicional
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def validate_idType(self, value):
        # Validate type idType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['comprobante']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on idType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.infoTributaria is not None or
            self.infoFactura is not None or
            self.detalles is not None or
            self.reembolsos is not None or
            self.retenciones is not None or
            self.infoSustitutivaGuiaRemision is not None or
            self.otrosRubrosTerceros is not None or
            self.tipoNegociable is not None or
            self.maquinaFiscal is not None or
            self.infoAdicional is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', name_='factura', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('factura')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'factura':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='factura')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='factura', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='factura'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', name_='factura', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.infoTributaria is not None:
            namespaceprefix_ = self.infoTributaria_nsprefix_ + ':' if (UseCapturedNS_ and self.infoTributaria_nsprefix_) else ''
            self.infoTributaria.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoTributaria', pretty_print=pretty_print)
        if self.infoFactura is not None:
            namespaceprefix_ = self.infoFactura_nsprefix_ + ':' if (UseCapturedNS_ and self.infoFactura_nsprefix_) else ''
            self.infoFactura.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoFactura', pretty_print=pretty_print)
        if self.detalles is not None:
            namespaceprefix_ = self.detalles_nsprefix_ + ':' if (UseCapturedNS_ and self.detalles_nsprefix_) else ''
            self.detalles.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detalles', pretty_print=pretty_print)
        if self.reembolsos is not None:
            namespaceprefix_ = self.reembolsos_nsprefix_ + ':' if (UseCapturedNS_ and self.reembolsos_nsprefix_) else ''
            self.reembolsos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='reembolsos', pretty_print=pretty_print)
        if self.retenciones is not None:
            namespaceprefix_ = self.retenciones_nsprefix_ + ':' if (UseCapturedNS_ and self.retenciones_nsprefix_) else ''
            self.retenciones.export(outfile, level, namespaceprefix_, namespacedef_='', name_='retenciones', pretty_print=pretty_print)
        if self.infoSustitutivaGuiaRemision is not None:
            namespaceprefix_ = self.infoSustitutivaGuiaRemision_nsprefix_ + ':' if (UseCapturedNS_ and self.infoSustitutivaGuiaRemision_nsprefix_) else ''
            self.infoSustitutivaGuiaRemision.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoSustitutivaGuiaRemision', pretty_print=pretty_print)
        if self.otrosRubrosTerceros is not None:
            namespaceprefix_ = self.otrosRubrosTerceros_nsprefix_ + ':' if (UseCapturedNS_ and self.otrosRubrosTerceros_nsprefix_) else ''
            self.otrosRubrosTerceros.export(outfile, level, namespaceprefix_, namespacedef_='', name_='otrosRubrosTerceros', pretty_print=pretty_print)
        if self.tipoNegociable is not None:
            namespaceprefix_ = self.tipoNegociable_nsprefix_ + ':' if (UseCapturedNS_ and self.tipoNegociable_nsprefix_) else ''
            self.tipoNegociable.export(outfile, level, namespaceprefix_, namespacedef_='', name_='tipoNegociable', pretty_print=pretty_print)
        if self.maquinaFiscal is not None:
            namespaceprefix_ = self.maquinaFiscal_nsprefix_ + ':' if (UseCapturedNS_ and self.maquinaFiscal_nsprefix_) else ''
            self.maquinaFiscal.export(outfile, level, namespaceprefix_, namespacedef_='', name_='maquinaFiscal', pretty_print=pretty_print)
        if self.infoAdicional is not None:
            namespaceprefix_ = self.infoAdicional_nsprefix_ + ':' if (UseCapturedNS_ and self.infoAdicional_nsprefix_) else ''
            self.infoAdicional.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoAdicional', pretty_print=pretty_print)
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Signature', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
            self.validate_idType(self.id)    # validate type idType
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'infoTributaria':
            obj_ = infoTributaria.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoTributaria = obj_
            obj_.original_tagname_ = 'infoTributaria'
        elif nodeName_ == 'infoFactura':
            obj_ = infoFacturaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoFactura = obj_
            obj_.original_tagname_ = 'infoFactura'
        elif nodeName_ == 'detalles':
            obj_ = detallesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detalles = obj_
            obj_.original_tagname_ = 'detalles'
        elif nodeName_ == 'reembolsos':
            obj_ = reembolsos.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.reembolsos = obj_
            obj_.original_tagname_ = 'reembolsos'
        elif nodeName_ == 'retenciones':
            obj_ = retencionesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.retenciones = obj_
            obj_.original_tagname_ = 'retenciones'
        elif nodeName_ == 'infoSustitutivaGuiaRemision':
            obj_ = infoSustitutivaGuiaRemisionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoSustitutivaGuiaRemision = obj_
            obj_.original_tagname_ = 'infoSustitutivaGuiaRemision'
        elif nodeName_ == 'otrosRubrosTerceros':
            obj_ = otrosRubrosTercerosType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.otrosRubrosTerceros = obj_
            obj_.original_tagname_ = 'otrosRubrosTerceros'
        elif nodeName_ == 'tipoNegociable':
            obj_ = tipoNegociable.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.tipoNegociable = obj_
            obj_.original_tagname_ = 'tipoNegociable'
        elif nodeName_ == 'maquinaFiscal':
            obj_ = maquinaFiscal.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.maquinaFiscal = obj_
            obj_.original_tagname_ = 'maquinaFiscal'
        elif nodeName_ == 'infoAdicional':
            obj_ = infoAdicionalType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoAdicional = obj_
            obj_.original_tagname_ = 'infoAdicional'
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
# end class factura


class SignatureType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.SignedInfo = SignedInfo
        self.SignedInfo_nsprefix_ = "ds"
        self.SignatureValue = SignatureValue
        self.SignatureValue_nsprefix_ = "ds"
        self.KeyInfo = KeyInfo
        self.KeyInfo_nsprefix_ = "ds"
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
        self.Object_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SignedInfo(self):
        return self.SignedInfo
    def set_SignedInfo(self, SignedInfo):
        self.SignedInfo = SignedInfo
    def get_SignatureValue(self):
        return self.SignatureValue
    def set_SignatureValue(self, SignatureValue):
        self.SignatureValue = SignatureValue
    def get_KeyInfo(self):
        return self.KeyInfo
    def set_KeyInfo(self, KeyInfo):
        self.KeyInfo = KeyInfo
    def get_Object(self):
        return self.Object
    def set_Object(self, Object):
        self.Object = Object
    def add_Object(self, value):
        self.Object.append(value)
    def insert_Object_at(self, index, value):
        self.Object.insert(index, value)
    def replace_Object_at(self, index, value):
        self.Object[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            namespaceprefix_ = self.SignedInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.SignedInfo_nsprefix_) else ''
            self.SignedInfo.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            namespaceprefix_ = self.SignatureValue_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureValue_nsprefix_) else ''
            self.SignatureValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            namespaceprefix_ = self.KeyInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.KeyInfo_nsprefix_) else ''
            self.KeyInfo.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            namespaceprefix_ = self.Object_nsprefix_ + ':' if (UseCapturedNS_ and self.Object_nsprefix_) else ''
            Object_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Object', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Object.append(obj_)
            obj_.original_tagname_ = 'Object'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.CanonicalizationMethod = CanonicalizationMethod
        self.CanonicalizationMethod_nsprefix_ = "ds"
        self.SignatureMethod = SignatureMethod
        self.SignatureMethod_nsprefix_ = "ds"
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.Reference_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CanonicalizationMethod(self):
        return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod):
        self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self):
        return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod):
        self.SignatureMethod = SignatureMethod
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def add_Reference(self, value):
        self.Reference.append(value)
    def insert_Reference_at(self, index, value):
        self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value):
        self.Reference[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignedInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignedInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignedInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            namespaceprefix_ = self.CanonicalizationMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.CanonicalizationMethod_nsprefix_) else ''
            self.CanonicalizationMethod.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            namespaceprefix_ = self.SignatureMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureMethod_nsprefix_) else ''
            self.SignatureMethod.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            Reference_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Reference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CanonicalizationMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='CanonicalizationMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CanonicalizationMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CanonicalizationMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CanonicalizationMethodType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        self.HMACOutputLength = HMACOutputLength
        self.validate_HMACOutputLengthType(self.HMACOutputLength)
        self.HMACOutputLength_nsprefix_ = "ds"
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HMACOutputLength(self):
        return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength):
        self.HMACOutputLength = HMACOutputLength
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_HMACOutputLengthType(self, value):
        result = True
        # Validate type HMACOutputLengthType, a restriction on integer.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignatureMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureMethodType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HMACOutputLength is not None:
            namespaceprefix_ = self.HMACOutputLength_nsprefix_ + ':' if (UseCapturedNS_ and self.HMACOutputLength_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHMACOutputLength>%s</%sHMACOutputLength>%s' % (namespaceprefix_ , self.gds_format_integer(self.HMACOutputLength, input_name='HMACOutputLength'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HMACOutputLength' and child_.text is not None:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'HMACOutputLength')
            ival_ = self.gds_validate_integer(ival_, node, 'HMACOutputLength')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'HMACOutputLength', ival_)
            self.content_.append(obj_)
            self.HMACOutputLength_nsprefix_ = child_.prefix
        elif nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, URI=None, Type=None, Transforms=None, DigestMethod=None, DigestValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.URI = _cast(None, URI)
        self.URI_nsprefix_ = None
        self.Type = _cast(None, Type)
        self.Type_nsprefix_ = None
        self.Transforms = Transforms
        self.Transforms_nsprefix_ = "ds"
        self.DigestMethod = DigestMethod
        self.DigestMethod_nsprefix_ = "ds"
        self.DigestValue = DigestValue
        self.DigestValue_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Transforms(self):
        return self.Transforms
    def set_Transforms(self, Transforms):
        self.Transforms = Transforms
    def get_DigestMethod(self):
        return self.DigestMethod
    def set_DigestMethod(self, DigestMethod):
        self.DigestMethod = DigestMethod
    def get_DigestValue(self):
        return self.DigestValue
    def set_DigestValue(self, DigestValue):
        self.DigestValue = DigestValue
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_URI(self):
        return self.URI
    def set_URI(self, URI):
        self.URI = URI
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def has__content(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ReferenceType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            namespaceprefix_ = self.Transforms_nsprefix_ + ':' if (UseCapturedNS_ and self.Transforms_nsprefix_) else ''
            self.Transforms.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            namespaceprefix_ = self.DigestMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.DigestMethod_nsprefix_) else ''
            self.DigestMethod.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            namespaceprefix_ = self.DigestValue_nsprefix_ + ':' if (UseCapturedNS_ and self.DigestValue_nsprefix_) else ''
            self.DigestValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='DigestValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            obj_ = DigestValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DigestValue = obj_
            obj_.original_tagname_ = 'DigestValue'
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Transform=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
        self.Transform_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Transform(self):
        return self.Transform
    def set_Transform(self, Transform):
        self.Transform = Transform
    def add_Transform(self, value):
        self.Transform.append(value)
    def insert_Transform_at(self, index, value):
        self.Transform.insert(index, value)
    def replace_Transform_at(self, index, value):
        self.Transform[index] = value
    def has__content(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='TransformsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransformsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransformsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransformsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='TransformsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            namespaceprefix_ = self.Transform_nsprefix_ + ':' if (UseCapturedNS_ and self.Transform_nsprefix_) else ''
            Transform_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Transform', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.XPath_nsprefix_ = None
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self):
        return self.XPath
    def set_XPath(self, XPath):
        self.XPath = XPath
    def add_XPath(self, value):
        self.XPath.append(value)
    def insert_XPath_at(self, index, value):
        self.XPath.insert(index, value)
    def replace_XPath_at(self, index, value):
        self.XPath[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='TransformType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransformType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransformType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for XPath_ in self.XPath:
            namespaceprefix_ = self.XPath_nsprefix_ + ':' if (UseCapturedNS_ and self.XPath_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXPath>%s</%sXPath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(XPath_), input_name='XPath')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            valuestr_ = self.gds_parse_string(valuestr_, node, 'XPath')
            valuestr_ = self.gds_validate_string(valuestr_, node, 'XPath')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
            self.XPath_nsprefix_ = child_.prefix
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.Algorithm_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self):
        return self.Algorithm
    def set_Algorithm(self, Algorithm):
        self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='DigestMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DigestMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DigestMethodType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        self.KeyName_nsprefix_ = "ds"
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        self.KeyValue_nsprefix_ = "ds"
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        self.RetrievalMethod_nsprefix_ = "ds"
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        self.X509Data_nsprefix_ = "ds"
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        self.PGPData_nsprefix_ = "ds"
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        self.SPKIData_nsprefix_ = "ds"
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.MgmtData_nsprefix_ = "ds"
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_KeyName(self):
        return self.KeyName
    def set_KeyName(self, KeyName):
        self.KeyName = KeyName
    def add_KeyName(self, value):
        self.KeyName.append(value)
    def insert_KeyName_at(self, index, value):
        self.KeyName.insert(index, value)
    def replace_KeyName_at(self, index, value):
        self.KeyName[index] = value
    def get_KeyValue(self):
        return self.KeyValue
    def set_KeyValue(self, KeyValue):
        self.KeyValue = KeyValue
    def add_KeyValue(self, value):
        self.KeyValue.append(value)
    def insert_KeyValue_at(self, index, value):
        self.KeyValue.insert(index, value)
    def replace_KeyValue_at(self, index, value):
        self.KeyValue[index] = value
    def get_RetrievalMethod(self):
        return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod):
        self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value):
        self.RetrievalMethod.append(value)
    def insert_RetrievalMethod_at(self, index, value):
        self.RetrievalMethod.insert(index, value)
    def replace_RetrievalMethod_at(self, index, value):
        self.RetrievalMethod[index] = value
    def get_X509Data(self):
        return self.X509Data
    def set_X509Data(self, X509Data):
        self.X509Data = X509Data
    def add_X509Data(self, value):
        self.X509Data.append(value)
    def insert_X509Data_at(self, index, value):
        self.X509Data.insert(index, value)
    def replace_X509Data_at(self, index, value):
        self.X509Data[index] = value
    def get_PGPData(self):
        return self.PGPData
    def set_PGPData(self, PGPData):
        self.PGPData = PGPData
    def add_PGPData(self, value):
        self.PGPData.append(value)
    def insert_PGPData_at(self, index, value):
        self.PGPData.insert(index, value)
    def replace_PGPData_at(self, index, value):
        self.PGPData[index] = value
    def get_SPKIData(self):
        return self.SPKIData
    def set_SPKIData(self, SPKIData):
        self.SPKIData = SPKIData
    def add_SPKIData(self, value):
        self.SPKIData.append(value)
    def insert_SPKIData_at(self, index, value):
        self.SPKIData.insert(index, value)
    def replace_SPKIData_at(self, index, value):
        self.SPKIData[index] = value
    def get_MgmtData(self):
        return self.MgmtData
    def set_MgmtData(self, MgmtData):
        self.MgmtData = MgmtData
    def add_MgmtData(self, value):
        self.MgmtData.append(value)
    def insert_MgmtData_at(self, index, value):
        self.MgmtData.insert(index, value)
    def replace_MgmtData_at(self, index, value):
        self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'KeyInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyInfoType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for KeyName_ in self.KeyName:
            namespaceprefix_ = self.KeyName_nsprefix_ + ':' if (UseCapturedNS_ and self.KeyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKeyName>%s</%sKeyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(KeyName_), input_name='KeyName')), namespaceprefix_ , eol_))
        for KeyValue_ in self.KeyValue:
            namespaceprefix_ = self.KeyValue_nsprefix_ + ':' if (UseCapturedNS_ and self.KeyValue_nsprefix_) else ''
            KeyValue_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='KeyValue', pretty_print=pretty_print)
        for RetrievalMethod_ in self.RetrievalMethod:
            namespaceprefix_ = self.RetrievalMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.RetrievalMethod_nsprefix_) else ''
            RetrievalMethod_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='RetrievalMethod', pretty_print=pretty_print)
        for X509Data_ in self.X509Data:
            namespaceprefix_ = self.X509Data_nsprefix_ + ':' if (UseCapturedNS_ and self.X509Data_nsprefix_) else ''
            X509Data_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='X509Data', pretty_print=pretty_print)
        for PGPData_ in self.PGPData:
            namespaceprefix_ = self.PGPData_nsprefix_ + ':' if (UseCapturedNS_ and self.PGPData_nsprefix_) else ''
            PGPData_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='PGPData', pretty_print=pretty_print)
        for SPKIData_ in self.SPKIData:
            namespaceprefix_ = self.SPKIData_nsprefix_ + ':' if (UseCapturedNS_ and self.SPKIData_nsprefix_) else ''
            SPKIData_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SPKIData', pretty_print=pretty_print)
        for MgmtData_ in self.MgmtData:
            namespaceprefix_ = self.MgmtData_nsprefix_ + ':' if (UseCapturedNS_ and self.MgmtData_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMgmtData>%s</%sMgmtData>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MgmtData_), input_name='MgmtData')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            valuestr_ = self.gds_parse_string(valuestr_, node, 'KeyName')
            valuestr_ = self.gds_validate_string(valuestr_, node, 'KeyName')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
            self.KeyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509DataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            valuestr_ = self.gds_parse_string(valuestr_, node, 'MgmtData')
            valuestr_ = self.gds_validate_string(valuestr_, node, 'MgmtData')
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
            self.MgmtData_nsprefix_ = child_.prefix
        elif nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DSAKeyValue = DSAKeyValue
        self.DSAKeyValue_nsprefix_ = "ds"
        self.RSAKeyValue = RSAKeyValue
        self.RSAKeyValue_nsprefix_ = "ds"
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DSAKeyValue(self):
        return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue):
        self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self):
        return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue):
        self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'KeyValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='KeyValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DSAKeyValue is not None:
            namespaceprefix_ = self.DSAKeyValue_nsprefix_ + ':' if (UseCapturedNS_ and self.DSAKeyValue_nsprefix_) else ''
            self.DSAKeyValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='DSAKeyValue', pretty_print=pretty_print)
        if self.RSAKeyValue is not None:
            namespaceprefix_ = self.RSAKeyValue_nsprefix_ + ':' if (UseCapturedNS_ and self.RSAKeyValue_nsprefix_) else ''
            self.RSAKeyValue.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='RSAKeyValue', pretty_print=pretty_print)
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, URI=None, Type=None, Transforms=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.URI = _cast(None, URI)
        self.URI_nsprefix_ = None
        self.Type = _cast(None, Type)
        self.Type_nsprefix_ = None
        self.Transforms = Transforms
        self.Transforms_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RetrievalMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Transforms(self):
        return self.Transforms
    def set_Transforms(self, Transforms):
        self.Transforms = Transforms
    def get_URI(self):
        return self.URI
    def set_URI(self, URI):
        self.URI = URI
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def has__content(self):
        if (
            self.Transforms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RetrievalMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RetrievalMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RetrievalMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RetrievalMethodType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RetrievalMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='RetrievalMethodType'):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            namespaceprefix_ = self.Transforms_nsprefix_ + ':' if (UseCapturedNS_ and self.Transforms_nsprefix_) else ''
            self.Transforms.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Transforms', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if X509IssuerSerial is None:
            self.X509IssuerSerial = []
        else:
            self.X509IssuerSerial = X509IssuerSerial
        self.X509IssuerSerial_nsprefix_ = "ds"
        if X509SKI is None:
            self.X509SKI = []
        else:
            self.X509SKI = X509SKI
        self.X509SKI_nsprefix_ = None
        if X509SubjectName is None:
            self.X509SubjectName = []
        else:
            self.X509SubjectName = X509SubjectName
        self.X509SubjectName_nsprefix_ = None
        if X509Certificate is None:
            self.X509Certificate = []
        else:
            self.X509Certificate = X509Certificate
        self.X509Certificate_nsprefix_ = None
        if X509CRL is None:
            self.X509CRL = []
        else:
            self.X509CRL = X509CRL
        self.X509CRL_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_X509IssuerSerial(self):
        return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial):
        self.X509IssuerSerial = X509IssuerSerial
    def add_X509IssuerSerial(self, value):
        self.X509IssuerSerial.append(value)
    def insert_X509IssuerSerial_at(self, index, value):
        self.X509IssuerSerial.insert(index, value)
    def replace_X509IssuerSerial_at(self, index, value):
        self.X509IssuerSerial[index] = value
    def get_X509SKI(self):
        return self.X509SKI
    def set_X509SKI(self, X509SKI):
        self.X509SKI = X509SKI
    def add_X509SKI(self, value):
        self.X509SKI.append(value)
    def insert_X509SKI_at(self, index, value):
        self.X509SKI.insert(index, value)
    def replace_X509SKI_at(self, index, value):
        self.X509SKI[index] = value
    def get_X509SubjectName(self):
        return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName):
        self.X509SubjectName = X509SubjectName
    def add_X509SubjectName(self, value):
        self.X509SubjectName.append(value)
    def insert_X509SubjectName_at(self, index, value):
        self.X509SubjectName.insert(index, value)
    def replace_X509SubjectName_at(self, index, value):
        self.X509SubjectName[index] = value
    def get_X509Certificate(self):
        return self.X509Certificate
    def set_X509Certificate(self, X509Certificate):
        self.X509Certificate = X509Certificate
    def add_X509Certificate(self, value):
        self.X509Certificate.append(value)
    def insert_X509Certificate_at(self, index, value):
        self.X509Certificate.insert(index, value)
    def replace_X509Certificate_at(self, index, value):
        self.X509Certificate[index] = value
    def get_X509CRL(self):
        return self.X509CRL
    def set_X509CRL(self, X509CRL):
        self.X509CRL = X509CRL
    def add_X509CRL(self, value):
        self.X509CRL.append(value)
    def insert_X509CRL_at(self, index, value):
        self.X509CRL.insert(index, value)
    def replace_X509CRL_at(self, index, value):
        self.X509CRL[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def has__content(self):
        if (
            self.X509IssuerSerial or
            self.X509SKI or
            self.X509SubjectName or
            self.X509Certificate or
            self.X509CRL or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509DataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'X509DataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='X509DataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='X509DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='X509DataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for X509IssuerSerial_ in self.X509IssuerSerial:
            namespaceprefix_ = self.X509IssuerSerial_nsprefix_ + ':' if (UseCapturedNS_ and self.X509IssuerSerial_nsprefix_) else ''
            X509IssuerSerial_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='X509IssuerSerial', pretty_print=pretty_print)
        for X509SKI_ in self.X509SKI:
            namespaceprefix_ = self.X509SKI_nsprefix_ + ':' if (UseCapturedNS_ and self.X509SKI_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SKI>%s</%sX509SKI>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509SKI_), input_name='X509SKI')), namespaceprefix_ , eol_))
        for X509SubjectName_ in self.X509SubjectName:
            namespaceprefix_ = self.X509SubjectName_nsprefix_ + ':' if (UseCapturedNS_ and self.X509SubjectName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SubjectName>%s</%sX509SubjectName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509SubjectName_), input_name='X509SubjectName')), namespaceprefix_ , eol_))
        for X509Certificate_ in self.X509Certificate:
            namespaceprefix_ = self.X509Certificate_nsprefix_ + ':' if (UseCapturedNS_ and self.X509Certificate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509Certificate_), input_name='X509Certificate')), namespaceprefix_ , eol_))
        for X509CRL_ in self.X509CRL:
            namespaceprefix_ = self.X509CRL_nsprefix_ + ':' if (UseCapturedNS_ and self.X509CRL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509CRL>%s</%sX509CRL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(X509CRL_), input_name='X509CRL')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.X509IssuerSerial.append(obj_)
            obj_.original_tagname_ = 'X509IssuerSerial'
        elif nodeName_ == 'X509SKI':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509SKI')
            value_ = self.gds_validate_string(value_, node, 'X509SKI')
            self.X509SKI.append(value_)
            self.X509SKI_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509SubjectName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509SubjectName')
            value_ = self.gds_validate_string(value_, node, 'X509SubjectName')
            self.X509SubjectName.append(value_)
            self.X509SubjectName_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509Certificate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509Certificate')
            value_ = self.gds_validate_string(value_, node, 'X509Certificate')
            self.X509Certificate.append(value_)
            self.X509Certificate_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509CRL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509CRL')
            value_ = self.gds_validate_string(value_, node, 'X509CRL')
            self.X509CRL.append(value_)
            self.X509CRL_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'X509DataType')
            self.set_anytypeobjs_(content_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.X509IssuerName = X509IssuerName
        self.X509IssuerName_nsprefix_ = None
        self.X509SerialNumber = X509SerialNumber
        self.X509SerialNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509IssuerSerialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_X509IssuerName(self):
        return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName):
        self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self):
        return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber):
        self.X509SerialNumber = X509SerialNumber
    def has__content(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509IssuerSerialType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509IssuerSerialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'X509IssuerSerialType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='X509IssuerSerialType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='X509IssuerSerialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='X509IssuerSerialType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            namespaceprefix_ = self.X509IssuerName_nsprefix_ + ':' if (UseCapturedNS_ and self.X509IssuerName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509IssuerName>%s</%sX509IssuerName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.X509IssuerName), input_name='X509IssuerName')), namespaceprefix_ , eol_))
        if self.X509SerialNumber is not None:
            namespaceprefix_ = self.X509SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.X509SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SerialNumber>%s</%sX509SerialNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.X509SerialNumber), input_name='X509SerialNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'X509IssuerName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509IssuerName')
            value_ = self.gds_validate_string(value_, node, 'X509IssuerName')
            self.X509IssuerName = value_
            self.X509IssuerName_nsprefix_ = child_.prefix
        elif nodeName_ == 'X509SerialNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'X509SerialNumber')
            value_ = self.gds_validate_string(value_, node, 'X509SerialNumber')
            self.X509SerialNumber = value_
            self.X509SerialNumber_nsprefix_ = child_.prefix
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PGPKeyID = PGPKeyID
        self.PGPKeyID_nsprefix_ = None
        self.PGPKeyPacket = PGPKeyPacket
        self.PGPKeyPacket_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PGPDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PGPKeyID(self):
        return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID):
        self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self):
        return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket):
        self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def has__content(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='PGPDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PGPDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PGPDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PGPDataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PGPDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='PGPDataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            namespaceprefix_ = self.PGPKeyID_nsprefix_ + ':' if (UseCapturedNS_ and self.PGPKeyID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyID>%s</%sPGPKeyID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyID), input_name='PGPKeyID')), namespaceprefix_ , eol_))
        if self.PGPKeyPacket is not None:
            namespaceprefix_ = self.PGPKeyPacket_nsprefix_ + ':' if (UseCapturedNS_ and self.PGPKeyPacket_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyPacket), input_name='PGPKeyPacket')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(str(obj_))
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PGPKeyID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PGPKeyID')
            value_ = self.gds_validate_string(value_, node, 'PGPKeyID')
            self.PGPKeyID = value_
            self.PGPKeyID_nsprefix_ = child_.prefix
        elif nodeName_ == 'PGPKeyPacket':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PGPKeyPacket')
            value_ = self.gds_validate_string(value_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = value_
            self.PGPKeyPacket_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'PGPDataType')
            self.anytypeobjs_.append(content_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SPKISexp is None:
            self.SPKISexp = []
        else:
            self.SPKISexp = SPKISexp
        self.SPKISexp_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SPKIDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SPKISexp(self):
        return self.SPKISexp
    def set_SPKISexp(self, SPKISexp):
        self.SPKISexp = SPKISexp
    def add_SPKISexp(self, value):
        self.SPKISexp.append(value)
    def insert_SPKISexp_at(self, index, value):
        self.SPKISexp.insert(index, value)
    def replace_SPKISexp_at(self, index, value):
        self.SPKISexp[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def has__content(self):
        if (
            self.SPKISexp or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SPKIDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SPKIDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SPKIDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SPKIDataType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SPKIDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SPKIDataType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SPKISexp_ in self.SPKISexp:
            namespaceprefix_ = self.SPKISexp_nsprefix_ + ':' if (UseCapturedNS_ and self.SPKISexp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSPKISexp>%s</%sSPKISexp>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SPKISexp_), input_name='SPKISexp')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SPKISexp':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SPKISexp')
            value_ = self.gds_validate_string(value_, node, 'SPKISexp')
            self.SPKISexp.append(value_)
            self.SPKISexp_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'SPKIDataType')
            self.set_anytypeobjs_(content_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, MimeType=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.MimeType = _cast(None, MimeType)
        self.MimeType_nsprefix_ = None
        self.Encoding = _cast(None, Encoding)
        self.Encoding_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_MimeType(self):
        return self.MimeType
    def set_MimeType(self, MimeType):
        self.MimeType = MimeType
    def get_Encoding(self):
        return self.Encoding
    def set_Encoding(self, Encoding):
        self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='ObjectType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ObjectType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ObjectType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            self.MimeType = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            self.Encoding = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.Reference_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def add_Reference(self, value):
        self.Reference.append(value)
    def insert_Reference_at(self, index, value):
        self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value):
        self.Reference[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ManifestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ManifestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManifestType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            Reference_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='Reference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
        self.SignatureProperty_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SignatureProperty(self):
        return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty):
        self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value):
        self.SignatureProperty.append(value)
    def insert_SignatureProperty_at(self, index, value):
        self.SignatureProperty.insert(index, value)
    def replace_SignatureProperty_at(self, index, value):
        self.SignatureProperty[index] = value
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def has__content(self):
        if (
            self.SignatureProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignaturePropertiesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertiesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignaturePropertiesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignaturePropertiesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignaturePropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            namespaceprefix_ = self.SignatureProperty_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureProperty_nsprefix_) else ''
            SignatureProperty_.export(outfile, level, namespaceprefix_='ds:', namespacedef_='', name_='SignatureProperty', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureProperty.append(obj_)
            obj_.original_tagname_ = 'SignatureProperty'
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Target = _cast(None, Target)
        self.Target_nsprefix_ = None
        self.Id = _cast(None, Id)
        self.Id_nsprefix_ = None
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self):
        return self.Target
    def set_Target(self, Target):
        self.Target = Target
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def has__content(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            self.content_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignaturePropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignaturePropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignaturePropertyType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if not fromsubclass_:
            if self.anytypeobjs_ is not None:
                content_ = self.anytypeobjs_
                outfile.write(content_)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == '':
            obj_ = __ANY__.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.P = P
        self.validate_CryptoBinary(self.P)
        self.P_nsprefix_ = "ds"
        self.Q = Q
        self.validate_CryptoBinary(self.Q)
        self.Q_nsprefix_ = "ds"
        self.G = G
        self.validate_CryptoBinary(self.G)
        self.G_nsprefix_ = "ds"
        self.Y = Y
        self.validate_CryptoBinary(self.Y)
        self.Y_nsprefix_ = "ds"
        self.J = J
        self.validate_CryptoBinary(self.J)
        self.J_nsprefix_ = "ds"
        self.Seed = Seed
        self.validate_CryptoBinary(self.Seed)
        self.Seed_nsprefix_ = "ds"
        self.PgenCounter = PgenCounter
        self.validate_CryptoBinary(self.PgenCounter)
        self.PgenCounter_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_P(self):
        return self.P
    def set_P(self, P):
        self.P = P
    def get_Q(self):
        return self.Q
    def set_Q(self, Q):
        self.Q = Q
    def get_G(self):
        return self.G
    def set_G(self, G):
        self.G = G
    def get_Y(self):
        return self.Y
    def set_Y(self, Y):
        self.Y = Y
    def get_J(self):
        return self.J
    def set_J(self, J):
        self.J = J
    def get_Seed(self):
        return self.Seed
    def set_Seed(self, Seed):
        self.Seed = Seed
    def get_PgenCounter(self):
        return self.PgenCounter
    def set_PgenCounter(self, PgenCounter):
        self.PgenCounter = PgenCounter
    def validate_CryptoBinary(self, value):
        result = True
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DSAKeyValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DSAKeyValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DSAKeyValueType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='DSAKeyValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            namespaceprefix_ = self.P_nsprefix_ + ':' if (UseCapturedNS_ and self.P_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sP>%s</%sP>%s' % (namespaceprefix_ , self.gds_format_base64(self.P, input_name='P'), namespaceprefix_ , eol_))
        if self.Q is not None:
            namespaceprefix_ = self.Q_nsprefix_ + ':' if (UseCapturedNS_ and self.Q_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQ>%s</%sQ>%s' % (namespaceprefix_ , self.gds_format_base64(self.Q, input_name='Q'), namespaceprefix_ , eol_))
        if self.G is not None:
            namespaceprefix_ = self.G_nsprefix_ + ':' if (UseCapturedNS_ and self.G_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sG>%s</%sG>%s' % (namespaceprefix_ , self.gds_format_base64(self.G, input_name='G'), namespaceprefix_ , eol_))
        if self.Y is not None:
            namespaceprefix_ = self.Y_nsprefix_ + ':' if (UseCapturedNS_ and self.Y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sY>%s</%sY>%s' % (namespaceprefix_ , self.gds_format_base64(self.Y, input_name='Y'), namespaceprefix_ , eol_))
        if self.J is not None:
            namespaceprefix_ = self.J_nsprefix_ + ':' if (UseCapturedNS_ and self.J_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJ>%s</%sJ>%s' % (namespaceprefix_ , self.gds_format_base64(self.J, input_name='J'), namespaceprefix_ , eol_))
        if self.Seed is not None:
            namespaceprefix_ = self.Seed_nsprefix_ + ':' if (UseCapturedNS_ and self.Seed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeed>%s</%sSeed>%s' % (namespaceprefix_ , self.gds_format_base64(self.Seed, input_name='Seed'), namespaceprefix_ , eol_))
        if self.PgenCounter is not None:
            namespaceprefix_ = self.PgenCounter_nsprefix_ + ':' if (UseCapturedNS_ and self.PgenCounter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPgenCounter>%s</%sPgenCounter>%s' % (namespaceprefix_ , self.gds_format_base64(self.PgenCounter, input_name='PgenCounter'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'P':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'P')
            else:
                bval_ = None
            self.P = bval_
            self.P_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.P)
        elif nodeName_ == 'Q':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Q')
            else:
                bval_ = None
            self.Q = bval_
            self.Q_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Q)
        elif nodeName_ == 'G':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'G')
            else:
                bval_ = None
            self.G = bval_
            self.G_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.G)
        elif nodeName_ == 'Y':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Y')
            else:
                bval_ = None
            self.Y = bval_
            self.Y_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Y)
        elif nodeName_ == 'J':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'J')
            else:
                bval_ = None
            self.J = bval_
            self.J_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.J)
        elif nodeName_ == 'Seed':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Seed')
            else:
                bval_ = None
            self.Seed = bval_
            self.Seed_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Seed)
        elif nodeName_ == 'PgenCounter':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PgenCounter')
            else:
                bval_ = None
            self.PgenCounter = bval_
            self.PgenCounter_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.PgenCounter)
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.Modulus = Modulus
        self.validate_CryptoBinary(self.Modulus)
        self.Modulus_nsprefix_ = "ds"
        self.Exponent = Exponent
        self.validate_CryptoBinary(self.Exponent)
        self.Exponent_nsprefix_ = "ds"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Modulus(self):
        return self.Modulus
    def set_Modulus(self, Modulus):
        self.Modulus = Modulus
    def get_Exponent(self):
        return self.Exponent
    def set_Exponent(self, Exponent):
        self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        result = True
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RSAKeyValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RSAKeyValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RSAKeyValueType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='RSAKeyValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='ds:', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            namespaceprefix_ = self.Modulus_nsprefix_ + ':' if (UseCapturedNS_ and self.Modulus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModulus>%s</%sModulus>%s' % (namespaceprefix_ , self.gds_format_base64(self.Modulus, input_name='Modulus'), namespaceprefix_ , eol_))
        if self.Exponent is not None:
            namespaceprefix_ = self.Exponent_nsprefix_ + ':' if (UseCapturedNS_ and self.Exponent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespaceprefix_ , self.gds_format_base64(self.Exponent, input_name='Exponent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            self.Modulus_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Modulus)
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            self.Exponent_nsprefix_ = child_.prefix
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Exponent)
# end class RSAKeyValueType


class DigestValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ds"
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestValueType.subclass:
            return DigestValueType.subclass(*args_, **kwargs_)
        else:
            return DigestValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_DigestValueType_impl(self, value):
        result = True
        # Validate type DigestValueType_impl, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DigestValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DigestValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DigestValueType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DigestValueType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ds="http://www.w3.org/2000/09/xmldsig#"', name_='DigestValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class DigestValueType


class pagoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, formaPago=None, total=None, plazo=None, unidadTiempo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.formaPago = formaPago
        self.validate_formaPago(self.formaPago)
        self.formaPago_nsprefix_ = None
        self.total = total
        self.validate_total(self.total)
        self.total_nsprefix_ = None
        self.plazo = plazo
        self.validate_plazo(self.plazo)
        self.plazo_nsprefix_ = None
        self.unidadTiempo = unidadTiempo
        self.validate_unidadTiempo(self.unidadTiempo)
        self.unidadTiempo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pagoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pagoType.subclass:
            return pagoType.subclass(*args_, **kwargs_)
        else:
            return pagoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_formaPago(self):
        return self.formaPago
    def set_formaPago(self, formaPago):
        self.formaPago = formaPago
    def get_total(self):
        return self.total
    def set_total(self, total):
        self.total = total
    def get_plazo(self):
        return self.plazo
    def set_plazo(self, plazo):
        self.plazo = plazo
    def get_unidadTiempo(self):
        return self.unidadTiempo
    def set_unidadTiempo(self, unidadTiempo):
        self.unidadTiempo = unidadTiempo
    def validate_formaPago(self, value):
        result = True
        # Validate type formaPago, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_formaPago_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_formaPago_patterns_, ))
                result = False
        return result
    validate_formaPago_patterns_ = [['^([0][1-9])$', '^([1][0-9])$', '^([2][0-1])$']]
    def validate_total(self, value):
        result = True
        # Validate type total, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on total' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on total' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_plazo(self, value):
        result = True
        # Validate type plazo, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on plazo' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on plazo' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_unidadTiempo(self, value):
        result = True
        # Validate type unidadTiempo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on unidadTiempo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on unidadTiempo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_unidadTiempo_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_unidadTiempo_patterns_, ))
                result = False
        return result
    validate_unidadTiempo_patterns_ = [['^([^\\n]*)$']]
    def has__content(self):
        if (
            self.formaPago is not None or
            self.total is not None or
            self.plazo is not None or
            self.unidadTiempo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='pagoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pagoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'pagoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='pagoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='pagoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='pagoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='pagoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.formaPago is not None:
            namespaceprefix_ = self.formaPago_nsprefix_ + ':' if (UseCapturedNS_ and self.formaPago_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sformaPago>%s</%sformaPago>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.formaPago), input_name='formaPago')), namespaceprefix_ , eol_))
        if self.total is not None:
            namespaceprefix_ = self.total_nsprefix_ + ':' if (UseCapturedNS_ and self.total_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotal>%s</%stotal>%s' % (namespaceprefix_ , self.gds_format_decimal(self.total, input_name='total'), namespaceprefix_ , eol_))
        if self.plazo is not None:
            namespaceprefix_ = self.plazo_nsprefix_ + ':' if (UseCapturedNS_ and self.plazo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splazo>%s</%splazo>%s' % (namespaceprefix_ , self.gds_format_decimal(self.plazo, input_name='plazo'), namespaceprefix_ , eol_))
        if self.unidadTiempo is not None:
            namespaceprefix_ = self.unidadTiempo_nsprefix_ + ':' if (UseCapturedNS_ and self.unidadTiempo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunidadTiempo>%s</%sunidadTiempo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.unidadTiempo), input_name='unidadTiempo')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'formaPago':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'formaPago')
            value_ = self.gds_validate_string(value_, node, 'formaPago')
            self.formaPago = value_
            self.formaPago_nsprefix_ = child_.prefix
            # validate type formaPago
            self.validate_formaPago(self.formaPago)
        elif nodeName_ == 'total' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'total')
            fval_ = self.gds_validate_decimal(fval_, node, 'total')
            self.total = fval_
            self.total_nsprefix_ = child_.prefix
            # validate type total
            self.validate_total(self.total)
        elif nodeName_ == 'plazo' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'plazo')
            fval_ = self.gds_validate_decimal(fval_, node, 'plazo')
            self.plazo = fval_
            self.plazo_nsprefix_ = child_.prefix
            # validate type plazo
            self.validate_plazo(self.plazo)
        elif nodeName_ == 'unidadTiempo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'unidadTiempo')
            value_ = self.gds_validate_string(value_, node, 'unidadTiempo')
            self.unidadTiempo = value_
            self.unidadTiempo_nsprefix_ = child_.prefix
            # validate type unidadTiempo
            self.validate_unidadTiempo(self.unidadTiempo)
# end class pagoType


class detalleImpuestoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codigo=None, codigoPorcentaje=None, tarifa=None, baseImponibleReembolso=None, impuestoReembolso=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codigo = codigo
        self.validate_codigoReembolso(self.codigo)
        self.codigo_nsprefix_ = None
        self.codigoPorcentaje = codigoPorcentaje
        self.validate_codigoPorcentajeReembolso(self.codigoPorcentaje)
        self.codigoPorcentaje_nsprefix_ = None
        self.tarifa = tarifa
        self.validate_tarifa(self.tarifa)
        self.tarifa_nsprefix_ = None
        self.baseImponibleReembolso = baseImponibleReembolso
        self.validate_baseImponibleReembolso(self.baseImponibleReembolso)
        self.baseImponibleReembolso_nsprefix_ = None
        self.impuestoReembolso = impuestoReembolso
        self.validate_impuestoReembolso(self.impuestoReembolso)
        self.impuestoReembolso_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detalleImpuestoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detalleImpuestoType.subclass:
            return detalleImpuestoType.subclass(*args_, **kwargs_)
        else:
            return detalleImpuestoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codigo(self):
        return self.codigo
    def set_codigo(self, codigo):
        self.codigo = codigo
    def get_codigoPorcentaje(self):
        return self.codigoPorcentaje
    def set_codigoPorcentaje(self, codigoPorcentaje):
        self.codigoPorcentaje = codigoPorcentaje
    def get_tarifa(self):
        return self.tarifa
    def set_tarifa(self, tarifa):
        self.tarifa = tarifa
    def get_baseImponibleReembolso(self):
        return self.baseImponibleReembolso
    def set_baseImponibleReembolso(self, baseImponibleReembolso):
        self.baseImponibleReembolso = baseImponibleReembolso
    def get_impuestoReembolso(self):
        return self.impuestoReembolso
    def set_impuestoReembolso(self, impuestoReembolso):
        self.impuestoReembolso = impuestoReembolso
    def validate_codigoReembolso(self, value):
        result = True
        # Validate type codigoReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoReembolso_patterns_, ))
                result = False
        return result
    validate_codigoReembolso_patterns_ = [['^([235])$']]
    def validate_codigoPorcentajeReembolso(self, value):
        result = True
        # Validate type codigoPorcentajeReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoPorcentajeReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoPorcentajeReembolso_patterns_, ))
                result = False
        return result
    validate_codigoPorcentajeReembolso_patterns_ = [['^([0-9]{1,4})$']]
    def validate_tarifa(self, value):
        result = True
        # Validate type tarifa, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_baseImponibleReembolso(self, value):
        result = True
        # Validate type baseImponibleReembolso, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on baseImponibleReembolso' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on baseImponibleReembolso' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_impuestoReembolso(self, value):
        result = True
        # Validate type impuestoReembolso, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on impuestoReembolso' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on impuestoReembolso' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.codigo is not None or
            self.codigoPorcentaje is not None or
            self.tarifa is not None or
            self.baseImponibleReembolso is not None or
            self.impuestoReembolso is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detalleImpuestoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detalleImpuestoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detalleImpuestoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detalleImpuestoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detalleImpuestoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detalleImpuestoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detalleImpuestoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigo is not None:
            namespaceprefix_ = self.codigo_nsprefix_ + ':' if (UseCapturedNS_ and self.codigo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigo>%s</%scodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigo), input_name='codigo')), namespaceprefix_ , eol_))
        if self.codigoPorcentaje is not None:
            namespaceprefix_ = self.codigoPorcentaje_nsprefix_ + ':' if (UseCapturedNS_ and self.codigoPorcentaje_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPorcentaje>%s</%scodigoPorcentaje>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigoPorcentaje), input_name='codigoPorcentaje')), namespaceprefix_ , eol_))
        if self.tarifa is not None:
            namespaceprefix_ = self.tarifa_nsprefix_ + ':' if (UseCapturedNS_ and self.tarifa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%starifa>%s</%starifa>%s' % (namespaceprefix_ , self.gds_format_decimal(self.tarifa, input_name='tarifa'), namespaceprefix_ , eol_))
        if self.baseImponibleReembolso is not None:
            namespaceprefix_ = self.baseImponibleReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.baseImponibleReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbaseImponibleReembolso>%s</%sbaseImponibleReembolso>%s' % (namespaceprefix_ , self.gds_format_decimal(self.baseImponibleReembolso, input_name='baseImponibleReembolso'), namespaceprefix_ , eol_))
        if self.impuestoReembolso is not None:
            namespaceprefix_ = self.impuestoReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.impuestoReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simpuestoReembolso>%s</%simpuestoReembolso>%s' % (namespaceprefix_ , self.gds_format_decimal(self.impuestoReembolso, input_name='impuestoReembolso'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codigo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigo')
            value_ = self.gds_validate_string(value_, node, 'codigo')
            self.codigo = value_
            self.codigo_nsprefix_ = child_.prefix
            # validate type codigoReembolso
            self.validate_codigoReembolso(self.codigo)
        elif nodeName_ == 'codigoPorcentaje':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigoPorcentaje')
            value_ = self.gds_validate_string(value_, node, 'codigoPorcentaje')
            self.codigoPorcentaje = value_
            self.codigoPorcentaje_nsprefix_ = child_.prefix
            # validate type codigoPorcentajeReembolso
            self.validate_codigoPorcentajeReembolso(self.codigoPorcentaje)
        elif nodeName_ == 'tarifa' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'tarifa')
            fval_ = self.gds_validate_decimal(fval_, node, 'tarifa')
            self.tarifa = fval_
            self.tarifa_nsprefix_ = child_.prefix
            # validate type tarifa
            self.validate_tarifa(self.tarifa)
        elif nodeName_ == 'baseImponibleReembolso' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'baseImponibleReembolso')
            fval_ = self.gds_validate_decimal(fval_, node, 'baseImponibleReembolso')
            self.baseImponibleReembolso = fval_
            self.baseImponibleReembolso_nsprefix_ = child_.prefix
            # validate type baseImponibleReembolso
            self.validate_baseImponibleReembolso(self.baseImponibleReembolso)
        elif nodeName_ == 'impuestoReembolso' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'impuestoReembolso')
            fval_ = self.gds_validate_decimal(fval_, node, 'impuestoReembolso')
            self.impuestoReembolso = fval_
            self.impuestoReembolso_nsprefix_ = child_.prefix
            # validate type impuestoReembolso
            self.validate_impuestoReembolso(self.impuestoReembolso)
# end class detalleImpuestoType


class reembolsoDetalleType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, tipoIdentificacionProveedorReembolso=None, identificacionProveedorReembolso=None, codPaisPagoProveedorReembolso=None, tipoProveedorReembolso=None, codDocReembolso=None, estabDocReembolso=None, ptoEmiDocReembolso=None, secuencialDocReembolso=None, fechaEmisionDocReembolso=None, numeroautorizacionDocReemb=None, detalleImpuestos=None, compensacionesReembolso=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.tipoIdentificacionProveedorReembolso = tipoIdentificacionProveedorReembolso
        self.validate_tipoIdentificacionProveedorReembolso(self.tipoIdentificacionProveedorReembolso)
        self.tipoIdentificacionProveedorReembolso_nsprefix_ = None
        self.identificacionProveedorReembolso = identificacionProveedorReembolso
        self.validate_identificacionProveedorReembolso(self.identificacionProveedorReembolso)
        self.identificacionProveedorReembolso_nsprefix_ = None
        self.codPaisPagoProveedorReembolso = codPaisPagoProveedorReembolso
        self.validate_codPaisPagoProveedorReembolso(self.codPaisPagoProveedorReembolso)
        self.codPaisPagoProveedorReembolso_nsprefix_ = None
        self.tipoProveedorReembolso = tipoProveedorReembolso
        self.validate_tipoProveedorReembolso(self.tipoProveedorReembolso)
        self.tipoProveedorReembolso_nsprefix_ = None
        self.codDocReembolso = codDocReembolso
        self.validate_codDocReembolso(self.codDocReembolso)
        self.codDocReembolso_nsprefix_ = None
        self.estabDocReembolso = estabDocReembolso
        self.validate_estabDocReembolso(self.estabDocReembolso)
        self.estabDocReembolso_nsprefix_ = None
        self.ptoEmiDocReembolso = ptoEmiDocReembolso
        self.validate_ptoEmiDocReembolso(self.ptoEmiDocReembolso)
        self.ptoEmiDocReembolso_nsprefix_ = None
        self.secuencialDocReembolso = secuencialDocReembolso
        self.validate_secuencialDocReembolso(self.secuencialDocReembolso)
        self.secuencialDocReembolso_nsprefix_ = None
        self.fechaEmisionDocReembolso = fechaEmisionDocReembolso
        self.validate_fechaEmisionDocReembolso(self.fechaEmisionDocReembolso)
        self.fechaEmisionDocReembolso_nsprefix_ = None
        self.numeroautorizacionDocReemb = numeroautorizacionDocReemb
        self.validate_numeroautorizacionDocReemb(self.numeroautorizacionDocReemb)
        self.numeroautorizacionDocReemb_nsprefix_ = None
        self.detalleImpuestos = detalleImpuestos
        self.detalleImpuestos_nsprefix_ = None
        self.compensacionesReembolso = compensacionesReembolso
        self.compensacionesReembolso_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, reembolsoDetalleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if reembolsoDetalleType.subclass:
            return reembolsoDetalleType.subclass(*args_, **kwargs_)
        else:
            return reembolsoDetalleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_tipoIdentificacionProveedorReembolso(self):
        return self.tipoIdentificacionProveedorReembolso
    def set_tipoIdentificacionProveedorReembolso(self, tipoIdentificacionProveedorReembolso):
        self.tipoIdentificacionProveedorReembolso = tipoIdentificacionProveedorReembolso
    def get_identificacionProveedorReembolso(self):
        return self.identificacionProveedorReembolso
    def set_identificacionProveedorReembolso(self, identificacionProveedorReembolso):
        self.identificacionProveedorReembolso = identificacionProveedorReembolso
    def get_codPaisPagoProveedorReembolso(self):
        return self.codPaisPagoProveedorReembolso
    def set_codPaisPagoProveedorReembolso(self, codPaisPagoProveedorReembolso):
        self.codPaisPagoProveedorReembolso = codPaisPagoProveedorReembolso
    def get_tipoProveedorReembolso(self):
        return self.tipoProveedorReembolso
    def set_tipoProveedorReembolso(self, tipoProveedorReembolso):
        self.tipoProveedorReembolso = tipoProveedorReembolso
    def get_codDocReembolso(self):
        return self.codDocReembolso
    def set_codDocReembolso(self, codDocReembolso):
        self.codDocReembolso = codDocReembolso
    def get_estabDocReembolso(self):
        return self.estabDocReembolso
    def set_estabDocReembolso(self, estabDocReembolso):
        self.estabDocReembolso = estabDocReembolso
    def get_ptoEmiDocReembolso(self):
        return self.ptoEmiDocReembolso
    def set_ptoEmiDocReembolso(self, ptoEmiDocReembolso):
        self.ptoEmiDocReembolso = ptoEmiDocReembolso
    def get_secuencialDocReembolso(self):
        return self.secuencialDocReembolso
    def set_secuencialDocReembolso(self, secuencialDocReembolso):
        self.secuencialDocReembolso = secuencialDocReembolso
    def get_fechaEmisionDocReembolso(self):
        return self.fechaEmisionDocReembolso
    def set_fechaEmisionDocReembolso(self, fechaEmisionDocReembolso):
        self.fechaEmisionDocReembolso = fechaEmisionDocReembolso
    def get_numeroautorizacionDocReemb(self):
        return self.numeroautorizacionDocReemb
    def set_numeroautorizacionDocReemb(self, numeroautorizacionDocReemb):
        self.numeroautorizacionDocReemb = numeroautorizacionDocReemb
    def get_detalleImpuestos(self):
        return self.detalleImpuestos
    def set_detalleImpuestos(self, detalleImpuestos):
        self.detalleImpuestos = detalleImpuestos
    def get_compensacionesReembolso(self):
        return self.compensacionesReembolso
    def set_compensacionesReembolso(self, compensacionesReembolso):
        self.compensacionesReembolso = compensacionesReembolso
    def validate_tipoIdentificacionProveedorReembolso(self, value):
        result = True
        # Validate type tipoIdentificacionProveedorReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_tipoIdentificacionProveedorReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_tipoIdentificacionProveedorReembolso_patterns_, ))
                result = False
        return result
    validate_tipoIdentificacionProveedorReembolso_patterns_ = [['^([0][4-8])$']]
    def validate_identificacionProveedorReembolso(self, value):
        result = True
        # Validate type identificacionProveedorReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on identificacionProveedorReembolso' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on identificacionProveedorReembolso' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_identificacionProveedorReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_identificacionProveedorReembolso_patterns_, ))
                result = False
        return result
    validate_identificacionProveedorReembolso_patterns_ = [['^([^\\n]*)$']]
    def validate_codPaisPagoProveedorReembolso(self, value):
        result = True
        # Validate type codPaisPagoProveedorReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codPaisPagoProveedorReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codPaisPagoProveedorReembolso_patterns_, ))
                result = False
        return result
    validate_codPaisPagoProveedorReembolso_patterns_ = [['^([0-9]{3})$']]
    def validate_tipoProveedorReembolso(self, value):
        result = True
        # Validate type tipoProveedorReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_tipoProveedorReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_tipoProveedorReembolso_patterns_, ))
                result = False
        return result
    validate_tipoProveedorReembolso_patterns_ = [['^([0][12])$']]
    def validate_codDocReembolso(self, value):
        result = True
        # Validate type codDocReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codDocReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codDocReembolso_patterns_, ))
                result = False
        return result
    validate_codDocReembolso_patterns_ = [['^([0-9]{2,3})$']]
    def validate_estabDocReembolso(self, value):
        result = True
        # Validate type estabDocReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_estabDocReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_estabDocReembolso_patterns_, ))
                result = False
        return result
    validate_estabDocReembolso_patterns_ = [['^([0-9]{3})$']]
    def validate_ptoEmiDocReembolso(self, value):
        result = True
        # Validate type ptoEmiDocReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_ptoEmiDocReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_ptoEmiDocReembolso_patterns_, ))
                result = False
        return result
    validate_ptoEmiDocReembolso_patterns_ = [['^([0-9]{3})$']]
    def validate_secuencialDocReembolso(self, value):
        result = True
        # Validate type secuencialDocReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_secuencialDocReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_secuencialDocReembolso_patterns_, ))
                result = False
        return result
    validate_secuencialDocReembolso_patterns_ = [['^([0-9]{9})$']]
    def validate_fechaEmisionDocReembolso(self, value):
        result = True
        # Validate type fechaEmisionDocReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_fechaEmisionDocReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_fechaEmisionDocReembolso_patterns_, ))
                result = False
        return result
    validate_fechaEmisionDocReembolso_patterns_ = [['^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/20[0-9][0-9])$']]
    def validate_numeroautorizacionDocReemb(self, value):
        result = True
        # Validate type numeroautorizacionDocReemb, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 49:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on numeroautorizacionDocReemb' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on numeroautorizacionDocReemb' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_numeroautorizacionDocReemb_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_numeroautorizacionDocReemb_patterns_, ))
                result = False
        return result
    validate_numeroautorizacionDocReemb_patterns_ = [['^([0-9]{10,49})$']]
    def has__content(self):
        if (
            self.tipoIdentificacionProveedorReembolso is not None or
            self.identificacionProveedorReembolso is not None or
            self.codPaisPagoProveedorReembolso is not None or
            self.tipoProveedorReembolso is not None or
            self.codDocReembolso is not None or
            self.estabDocReembolso is not None or
            self.ptoEmiDocReembolso is not None or
            self.secuencialDocReembolso is not None or
            self.fechaEmisionDocReembolso is not None or
            self.numeroautorizacionDocReemb is not None or
            self.detalleImpuestos is not None or
            self.compensacionesReembolso is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='reembolsoDetalleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('reembolsoDetalleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'reembolsoDetalleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='reembolsoDetalleType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='reembolsoDetalleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='reembolsoDetalleType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='reembolsoDetalleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tipoIdentificacionProveedorReembolso is not None:
            namespaceprefix_ = self.tipoIdentificacionProveedorReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.tipoIdentificacionProveedorReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoIdentificacionProveedorReembolso>%s</%stipoIdentificacionProveedorReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tipoIdentificacionProveedorReembolso), input_name='tipoIdentificacionProveedorReembolso')), namespaceprefix_ , eol_))
        if self.identificacionProveedorReembolso is not None:
            namespaceprefix_ = self.identificacionProveedorReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.identificacionProveedorReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificacionProveedorReembolso>%s</%sidentificacionProveedorReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identificacionProveedorReembolso), input_name='identificacionProveedorReembolso')), namespaceprefix_ , eol_))
        if self.codPaisPagoProveedorReembolso is not None:
            namespaceprefix_ = self.codPaisPagoProveedorReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.codPaisPagoProveedorReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodPaisPagoProveedorReembolso>%s</%scodPaisPagoProveedorReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codPaisPagoProveedorReembolso), input_name='codPaisPagoProveedorReembolso')), namespaceprefix_ , eol_))
        if self.tipoProveedorReembolso is not None:
            namespaceprefix_ = self.tipoProveedorReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.tipoProveedorReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoProveedorReembolso>%s</%stipoProveedorReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tipoProveedorReembolso), input_name='tipoProveedorReembolso')), namespaceprefix_ , eol_))
        if self.codDocReembolso is not None:
            namespaceprefix_ = self.codDocReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.codDocReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodDocReembolso>%s</%scodDocReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codDocReembolso), input_name='codDocReembolso')), namespaceprefix_ , eol_))
        if self.estabDocReembolso is not None:
            namespaceprefix_ = self.estabDocReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.estabDocReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sestabDocReembolso>%s</%sestabDocReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.estabDocReembolso), input_name='estabDocReembolso')), namespaceprefix_ , eol_))
        if self.ptoEmiDocReembolso is not None:
            namespaceprefix_ = self.ptoEmiDocReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.ptoEmiDocReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sptoEmiDocReembolso>%s</%sptoEmiDocReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ptoEmiDocReembolso), input_name='ptoEmiDocReembolso')), namespaceprefix_ , eol_))
        if self.secuencialDocReembolso is not None:
            namespaceprefix_ = self.secuencialDocReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.secuencialDocReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssecuencialDocReembolso>%s</%ssecuencialDocReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.secuencialDocReembolso), input_name='secuencialDocReembolso')), namespaceprefix_ , eol_))
        if self.fechaEmisionDocReembolso is not None:
            namespaceprefix_ = self.fechaEmisionDocReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.fechaEmisionDocReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfechaEmisionDocReembolso>%s</%sfechaEmisionDocReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.fechaEmisionDocReembolso), input_name='fechaEmisionDocReembolso')), namespaceprefix_ , eol_))
        if self.numeroautorizacionDocReemb is not None:
            namespaceprefix_ = self.numeroautorizacionDocReemb_nsprefix_ + ':' if (UseCapturedNS_ and self.numeroautorizacionDocReemb_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroautorizacionDocReemb>%s</%snumeroautorizacionDocReemb>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numeroautorizacionDocReemb), input_name='numeroautorizacionDocReemb')), namespaceprefix_ , eol_))
        if self.detalleImpuestos is not None:
            namespaceprefix_ = self.detalleImpuestos_nsprefix_ + ':' if (UseCapturedNS_ and self.detalleImpuestos_nsprefix_) else ''
            self.detalleImpuestos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detalleImpuestos', pretty_print=pretty_print)
        if self.compensacionesReembolso is not None:
            namespaceprefix_ = self.compensacionesReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.compensacionesReembolso_nsprefix_) else ''
            self.compensacionesReembolso.export(outfile, level, namespaceprefix_, namespacedef_='', name_='compensacionesReembolso', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'tipoIdentificacionProveedorReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'tipoIdentificacionProveedorReembolso')
            value_ = self.gds_validate_string(value_, node, 'tipoIdentificacionProveedorReembolso')
            self.tipoIdentificacionProveedorReembolso = value_
            self.tipoIdentificacionProveedorReembolso_nsprefix_ = child_.prefix
            # validate type tipoIdentificacionProveedorReembolso
            self.validate_tipoIdentificacionProveedorReembolso(self.tipoIdentificacionProveedorReembolso)
        elif nodeName_ == 'identificacionProveedorReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identificacionProveedorReembolso')
            value_ = self.gds_validate_string(value_, node, 'identificacionProveedorReembolso')
            self.identificacionProveedorReembolso = value_
            self.identificacionProveedorReembolso_nsprefix_ = child_.prefix
            # validate type identificacionProveedorReembolso
            self.validate_identificacionProveedorReembolso(self.identificacionProveedorReembolso)
        elif nodeName_ == 'codPaisPagoProveedorReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codPaisPagoProveedorReembolso')
            value_ = self.gds_validate_string(value_, node, 'codPaisPagoProveedorReembolso')
            self.codPaisPagoProveedorReembolso = value_
            self.codPaisPagoProveedorReembolso_nsprefix_ = child_.prefix
            # validate type codPaisPagoProveedorReembolso
            self.validate_codPaisPagoProveedorReembolso(self.codPaisPagoProveedorReembolso)
        elif nodeName_ == 'tipoProveedorReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'tipoProveedorReembolso')
            value_ = self.gds_validate_string(value_, node, 'tipoProveedorReembolso')
            self.tipoProveedorReembolso = value_
            self.tipoProveedorReembolso_nsprefix_ = child_.prefix
            # validate type tipoProveedorReembolso
            self.validate_tipoProveedorReembolso(self.tipoProveedorReembolso)
        elif nodeName_ == 'codDocReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codDocReembolso')
            value_ = self.gds_validate_string(value_, node, 'codDocReembolso')
            self.codDocReembolso = value_
            self.codDocReembolso_nsprefix_ = child_.prefix
            # validate type codDocReembolso
            self.validate_codDocReembolso(self.codDocReembolso)
        elif nodeName_ == 'estabDocReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'estabDocReembolso')
            value_ = self.gds_validate_string(value_, node, 'estabDocReembolso')
            self.estabDocReembolso = value_
            self.estabDocReembolso_nsprefix_ = child_.prefix
            # validate type estabDocReembolso
            self.validate_estabDocReembolso(self.estabDocReembolso)
        elif nodeName_ == 'ptoEmiDocReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ptoEmiDocReembolso')
            value_ = self.gds_validate_string(value_, node, 'ptoEmiDocReembolso')
            self.ptoEmiDocReembolso = value_
            self.ptoEmiDocReembolso_nsprefix_ = child_.prefix
            # validate type ptoEmiDocReembolso
            self.validate_ptoEmiDocReembolso(self.ptoEmiDocReembolso)
        elif nodeName_ == 'secuencialDocReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'secuencialDocReembolso')
            value_ = self.gds_validate_string(value_, node, 'secuencialDocReembolso')
            self.secuencialDocReembolso = value_
            self.secuencialDocReembolso_nsprefix_ = child_.prefix
            # validate type secuencialDocReembolso
            self.validate_secuencialDocReembolso(self.secuencialDocReembolso)
        elif nodeName_ == 'fechaEmisionDocReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'fechaEmisionDocReembolso')
            value_ = self.gds_validate_string(value_, node, 'fechaEmisionDocReembolso')
            self.fechaEmisionDocReembolso = value_
            self.fechaEmisionDocReembolso_nsprefix_ = child_.prefix
            # validate type fechaEmisionDocReembolso
            self.validate_fechaEmisionDocReembolso(self.fechaEmisionDocReembolso)
        elif nodeName_ == 'numeroautorizacionDocReemb':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numeroautorizacionDocReemb')
            value_ = self.gds_validate_string(value_, node, 'numeroautorizacionDocReemb')
            self.numeroautorizacionDocReemb = value_
            self.numeroautorizacionDocReemb_nsprefix_ = child_.prefix
            # validate type numeroautorizacionDocReemb
            self.validate_numeroautorizacionDocReemb(self.numeroautorizacionDocReemb)
        elif nodeName_ == 'detalleImpuestos':
            obj_ = detalleImpuestos.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detalleImpuestos = obj_
            obj_.original_tagname_ = 'detalleImpuestos'
        elif nodeName_ == 'compensacionesReembolso':
            obj_ = compensacionesReembolso.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.compensacionesReembolso = obj_
            obj_.original_tagname_ = 'compensacionesReembolso'
# end class reembolsoDetalleType


class infoFacturaType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, fechaEmision=None, dirEstablecimiento=None, contribuyenteEspecial=None, obligadoContabilidad=None, comercioExterior=None, incoTermFactura=None, lugarIncoTerm=None, paisOrigen=None, puertoEmbarque=None, puertoDestino=None, paisDestino=None, paisAdquisicion=None, tipoIdentificacionComprador=None, guiaRemision=None, razonSocialComprador=None, identificacionComprador=None, direccionComprador=None, totalSinImpuestos=None, totalSubsidio=None, incoTermTotalSinImpuestos=None, totalDescuento=None, codDocReembolso=None, totalComprobantesReembolso=None, totalBaseImponibleReembolso=None, totalImpuestoReembolso=None, totalConImpuestos=None, compensaciones=None, propina=None, fleteInternacional=None, seguroInternacional=None, gastosAduaneros=None, gastosTransporteOtros=None, importeTotal=None, moneda=None, placa=None, pagos=None, valorRetIva=None, valorRetRenta=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.fechaEmision = fechaEmision
        self.validate_fechaEmision(self.fechaEmision)
        self.fechaEmision_nsprefix_ = None
        self.dirEstablecimiento = dirEstablecimiento
        self.validate_dirEstablecimiento(self.dirEstablecimiento)
        self.dirEstablecimiento_nsprefix_ = None
        self.contribuyenteEspecial = contribuyenteEspecial
        self.validate_contribuyenteEspecial(self.contribuyenteEspecial)
        self.contribuyenteEspecial_nsprefix_ = None
        self.obligadoContabilidad = obligadoContabilidad
        self.validate_obligadoContabilidad(self.obligadoContabilidad)
        self.obligadoContabilidad_nsprefix_ = None
        self.comercioExterior = comercioExterior
        self.validate_comercioExterior(self.comercioExterior)
        self.comercioExterior_nsprefix_ = None
        self.incoTermFactura = incoTermFactura
        self.validate_incoTermFactura(self.incoTermFactura)
        self.incoTermFactura_nsprefix_ = None
        self.lugarIncoTerm = lugarIncoTerm
        self.validate_lugarIncoTerm(self.lugarIncoTerm)
        self.lugarIncoTerm_nsprefix_ = None
        self.paisOrigen = paisOrigen
        self.validate_paisOrigen(self.paisOrigen)
        self.paisOrigen_nsprefix_ = None
        self.puertoEmbarque = puertoEmbarque
        self.validate_puertoEmbarque(self.puertoEmbarque)
        self.puertoEmbarque_nsprefix_ = None
        self.puertoDestino = puertoDestino
        self.validate_puertoDestino(self.puertoDestino)
        self.puertoDestino_nsprefix_ = None
        self.paisDestino = paisDestino
        self.validate_paisDestino(self.paisDestino)
        self.paisDestino_nsprefix_ = None
        self.paisAdquisicion = paisAdquisicion
        self.validate_paisAdquisicion(self.paisAdquisicion)
        self.paisAdquisicion_nsprefix_ = None
        self.tipoIdentificacionComprador = tipoIdentificacionComprador
        self.validate_tipoIdentificacionComprador(self.tipoIdentificacionComprador)
        self.tipoIdentificacionComprador_nsprefix_ = None
        self.guiaRemision = guiaRemision
        self.validate_guiaRemision(self.guiaRemision)
        self.guiaRemision_nsprefix_ = None
        self.razonSocialComprador = razonSocialComprador
        self.validate_razonSocialComprador(self.razonSocialComprador)
        self.razonSocialComprador_nsprefix_ = None
        self.identificacionComprador = identificacionComprador
        self.validate_identificacionComprador(self.identificacionComprador)
        self.identificacionComprador_nsprefix_ = None
        self.direccionComprador = direccionComprador
        self.validate_direccionComprador(self.direccionComprador)
        self.direccionComprador_nsprefix_ = None
        self.totalSinImpuestos = totalSinImpuestos
        self.validate_totalSinImpuestos(self.totalSinImpuestos)
        self.totalSinImpuestos_nsprefix_ = None
        self.totalSubsidio = totalSubsidio
        self.validate_totalSubsidio(self.totalSubsidio)
        self.totalSubsidio_nsprefix_ = None
        self.incoTermTotalSinImpuestos = incoTermTotalSinImpuestos
        self.validate_incoTermTotalSinImpuestos(self.incoTermTotalSinImpuestos)
        self.incoTermTotalSinImpuestos_nsprefix_ = None
        self.totalDescuento = totalDescuento
        self.validate_totalDescuentos(self.totalDescuento)
        self.totalDescuento_nsprefix_ = None
        self.codDocReembolso = codDocReembolso
        self.validate_codigoDocumentoReembolso(self.codDocReembolso)
        self.codDocReembolso_nsprefix_ = None
        self.totalComprobantesReembolso = totalComprobantesReembolso
        self.validate_totalComprobantesReembolso(self.totalComprobantesReembolso)
        self.totalComprobantesReembolso_nsprefix_ = None
        self.totalBaseImponibleReembolso = totalBaseImponibleReembolso
        self.validate_totalBaseImponibleReembolso(self.totalBaseImponibleReembolso)
        self.totalBaseImponibleReembolso_nsprefix_ = None
        self.totalImpuestoReembolso = totalImpuestoReembolso
        self.validate_totalImpuestoReembolso(self.totalImpuestoReembolso)
        self.totalImpuestoReembolso_nsprefix_ = None
        self.totalConImpuestos = totalConImpuestos
        self.totalConImpuestos_nsprefix_ = None
        self.compensaciones = compensaciones
        self.compensaciones_nsprefix_ = None
        self.propina = propina
        self.validate_propina(self.propina)
        self.propina_nsprefix_ = None
        self.fleteInternacional = fleteInternacional
        self.validate_fleteInternacional(self.fleteInternacional)
        self.fleteInternacional_nsprefix_ = None
        self.seguroInternacional = seguroInternacional
        self.validate_seguroInternacional(self.seguroInternacional)
        self.seguroInternacional_nsprefix_ = None
        self.gastosAduaneros = gastosAduaneros
        self.validate_gastosAduaneros(self.gastosAduaneros)
        self.gastosAduaneros_nsprefix_ = None
        self.gastosTransporteOtros = gastosTransporteOtros
        self.validate_gastosTransporteOtros(self.gastosTransporteOtros)
        self.gastosTransporteOtros_nsprefix_ = None
        self.importeTotal = importeTotal
        self.validate_importeTotal(self.importeTotal)
        self.importeTotal_nsprefix_ = None
        self.moneda = moneda
        self.validate_moneda(self.moneda)
        self.moneda_nsprefix_ = None
        self.placa = placa
        self.validate_placa(self.placa)
        self.placa_nsprefix_ = None
        self.pagos = pagos
        self.pagos_nsprefix_ = None
        self.valorRetIva = valorRetIva
        self.validate_valorRetIva(self.valorRetIva)
        self.valorRetIva_nsprefix_ = None
        self.valorRetRenta = valorRetRenta
        self.validate_valorRetRenta(self.valorRetRenta)
        self.valorRetRenta_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoFacturaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoFacturaType.subclass:
            return infoFacturaType.subclass(*args_, **kwargs_)
        else:
            return infoFacturaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_fechaEmision(self):
        return self.fechaEmision
    def set_fechaEmision(self, fechaEmision):
        self.fechaEmision = fechaEmision
    def get_dirEstablecimiento(self):
        return self.dirEstablecimiento
    def set_dirEstablecimiento(self, dirEstablecimiento):
        self.dirEstablecimiento = dirEstablecimiento
    def get_contribuyenteEspecial(self):
        return self.contribuyenteEspecial
    def set_contribuyenteEspecial(self, contribuyenteEspecial):
        self.contribuyenteEspecial = contribuyenteEspecial
    def get_obligadoContabilidad(self):
        return self.obligadoContabilidad
    def set_obligadoContabilidad(self, obligadoContabilidad):
        self.obligadoContabilidad = obligadoContabilidad
    def get_comercioExterior(self):
        return self.comercioExterior
    def set_comercioExterior(self, comercioExterior):
        self.comercioExterior = comercioExterior
    def get_incoTermFactura(self):
        return self.incoTermFactura
    def set_incoTermFactura(self, incoTermFactura):
        self.incoTermFactura = incoTermFactura
    def get_lugarIncoTerm(self):
        return self.lugarIncoTerm
    def set_lugarIncoTerm(self, lugarIncoTerm):
        self.lugarIncoTerm = lugarIncoTerm
    def get_paisOrigen(self):
        return self.paisOrigen
    def set_paisOrigen(self, paisOrigen):
        self.paisOrigen = paisOrigen
    def get_puertoEmbarque(self):
        return self.puertoEmbarque
    def set_puertoEmbarque(self, puertoEmbarque):
        self.puertoEmbarque = puertoEmbarque
    def get_puertoDestino(self):
        return self.puertoDestino
    def set_puertoDestino(self, puertoDestino):
        self.puertoDestino = puertoDestino
    def get_paisDestino(self):
        return self.paisDestino
    def set_paisDestino(self, paisDestino):
        self.paisDestino = paisDestino
    def get_paisAdquisicion(self):
        return self.paisAdquisicion
    def set_paisAdquisicion(self, paisAdquisicion):
        self.paisAdquisicion = paisAdquisicion
    def get_tipoIdentificacionComprador(self):
        return self.tipoIdentificacionComprador
    def set_tipoIdentificacionComprador(self, tipoIdentificacionComprador):
        self.tipoIdentificacionComprador = tipoIdentificacionComprador
    def get_guiaRemision(self):
        return self.guiaRemision
    def set_guiaRemision(self, guiaRemision):
        self.guiaRemision = guiaRemision
    def get_razonSocialComprador(self):
        return self.razonSocialComprador
    def set_razonSocialComprador(self, razonSocialComprador):
        self.razonSocialComprador = razonSocialComprador
    def get_identificacionComprador(self):
        return self.identificacionComprador
    def set_identificacionComprador(self, identificacionComprador):
        self.identificacionComprador = identificacionComprador
    def get_direccionComprador(self):
        return self.direccionComprador
    def set_direccionComprador(self, direccionComprador):
        self.direccionComprador = direccionComprador
    def get_totalSinImpuestos(self):
        return self.totalSinImpuestos
    def set_totalSinImpuestos(self, totalSinImpuestos):
        self.totalSinImpuestos = totalSinImpuestos
    def get_totalSubsidio(self):
        return self.totalSubsidio
    def set_totalSubsidio(self, totalSubsidio):
        self.totalSubsidio = totalSubsidio
    def get_incoTermTotalSinImpuestos(self):
        return self.incoTermTotalSinImpuestos
    def set_incoTermTotalSinImpuestos(self, incoTermTotalSinImpuestos):
        self.incoTermTotalSinImpuestos = incoTermTotalSinImpuestos
    def get_totalDescuento(self):
        return self.totalDescuento
    def set_totalDescuento(self, totalDescuento):
        self.totalDescuento = totalDescuento
    def get_codDocReembolso(self):
        return self.codDocReembolso
    def set_codDocReembolso(self, codDocReembolso):
        self.codDocReembolso = codDocReembolso
    def get_totalComprobantesReembolso(self):
        return self.totalComprobantesReembolso
    def set_totalComprobantesReembolso(self, totalComprobantesReembolso):
        self.totalComprobantesReembolso = totalComprobantesReembolso
    def get_totalBaseImponibleReembolso(self):
        return self.totalBaseImponibleReembolso
    def set_totalBaseImponibleReembolso(self, totalBaseImponibleReembolso):
        self.totalBaseImponibleReembolso = totalBaseImponibleReembolso
    def get_totalImpuestoReembolso(self):
        return self.totalImpuestoReembolso
    def set_totalImpuestoReembolso(self, totalImpuestoReembolso):
        self.totalImpuestoReembolso = totalImpuestoReembolso
    def get_totalConImpuestos(self):
        return self.totalConImpuestos
    def set_totalConImpuestos(self, totalConImpuestos):
        self.totalConImpuestos = totalConImpuestos
    def get_compensaciones(self):
        return self.compensaciones
    def set_compensaciones(self, compensaciones):
        self.compensaciones = compensaciones
    def get_propina(self):
        return self.propina
    def set_propina(self, propina):
        self.propina = propina
    def get_fleteInternacional(self):
        return self.fleteInternacional
    def set_fleteInternacional(self, fleteInternacional):
        self.fleteInternacional = fleteInternacional
    def get_seguroInternacional(self):
        return self.seguroInternacional
    def set_seguroInternacional(self, seguroInternacional):
        self.seguroInternacional = seguroInternacional
    def get_gastosAduaneros(self):
        return self.gastosAduaneros
    def set_gastosAduaneros(self, gastosAduaneros):
        self.gastosAduaneros = gastosAduaneros
    def get_gastosTransporteOtros(self):
        return self.gastosTransporteOtros
    def set_gastosTransporteOtros(self, gastosTransporteOtros):
        self.gastosTransporteOtros = gastosTransporteOtros
    def get_importeTotal(self):
        return self.importeTotal
    def set_importeTotal(self, importeTotal):
        self.importeTotal = importeTotal
    def get_moneda(self):
        return self.moneda
    def set_moneda(self, moneda):
        self.moneda = moneda
    def get_placa(self):
        return self.placa
    def set_placa(self, placa):
        self.placa = placa
    def get_pagos(self):
        return self.pagos
    def set_pagos(self, pagos):
        self.pagos = pagos
    def get_valorRetIva(self):
        return self.valorRetIva
    def set_valorRetIva(self, valorRetIva):
        self.valorRetIva = valorRetIva
    def get_valorRetRenta(self):
        return self.valorRetRenta
    def set_valorRetRenta(self, valorRetRenta):
        self.valorRetRenta = valorRetRenta
    def validate_fechaEmision(self, value):
        result = True
        # Validate type fechaEmision, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_fechaEmision_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_fechaEmision_patterns_, ))
                result = False
        return result
    validate_fechaEmision_patterns_ = [['^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/20[0-9][0-9])$']]
    def validate_dirEstablecimiento(self, value):
        result = True
        # Validate type dirEstablecimiento, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on dirEstablecimiento' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on dirEstablecimiento' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_dirEstablecimiento_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_dirEstablecimiento_patterns_, ))
                result = False
        return result
    validate_dirEstablecimiento_patterns_ = [['^([^\\n]*)$']]
    def validate_contribuyenteEspecial(self, value):
        result = True
        # Validate type contribuyenteEspecial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on contribuyenteEspecial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on contribuyenteEspecial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_contribuyenteEspecial_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_contribuyenteEspecial_patterns_, ))
                result = False
        return result
    validate_contribuyenteEspecial_patterns_ = [['^(([A-Za-z0-9])*)$']]
    def validate_obligadoContabilidad(self, value):
        result = True
        # Validate type obligadoContabilidad, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SI', 'NO']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on obligadoContabilidad' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_comercioExterior(self, value):
        result = True
        # Validate type comercioExterior, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_comercioExterior_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_comercioExterior_patterns_, ))
                result = False
        return result
    validate_comercioExterior_patterns_ = [['^(EXPORTADOR)$']]
    def validate_incoTermFactura(self, value):
        result = True
        # Validate type incoTermFactura, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on incoTermFactura' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on incoTermFactura' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_incoTermFactura_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_incoTermFactura_patterns_, ))
                result = False
        return result
    validate_incoTermFactura_patterns_ = [['^(([A-Z])*)$']]
    def validate_lugarIncoTerm(self, value):
        result = True
        # Validate type lugarIncoTerm, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on lugarIncoTerm' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on lugarIncoTerm' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_lugarIncoTerm_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_lugarIncoTerm_patterns_, ))
                result = False
        return result
    validate_lugarIncoTerm_patterns_ = [['^([^\\n]*)$']]
    def validate_paisOrigen(self, value):
        result = True
        # Validate type paisOrigen, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_paisOrigen_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_paisOrigen_patterns_, ))
                result = False
        return result
    validate_paisOrigen_patterns_ = [['^([0-9]{3})$']]
    def validate_puertoEmbarque(self, value):
        result = True
        # Validate type puertoEmbarque, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on puertoEmbarque' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on puertoEmbarque' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_puertoEmbarque_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_puertoEmbarque_patterns_, ))
                result = False
        return result
    validate_puertoEmbarque_patterns_ = [['^([^\\n]*)$']]
    def validate_puertoDestino(self, value):
        result = True
        # Validate type puertoDestino, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on puertoDestino' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on puertoDestino' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_puertoDestino_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_puertoDestino_patterns_, ))
                result = False
        return result
    validate_puertoDestino_patterns_ = [['^([^\\n]*)$']]
    def validate_paisDestino(self, value):
        result = True
        # Validate type paisDestino, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_paisDestino_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_paisDestino_patterns_, ))
                result = False
        return result
    validate_paisDestino_patterns_ = [['^([0-9]{3})$']]
    def validate_paisAdquisicion(self, value):
        result = True
        # Validate type paisAdquisicion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_paisAdquisicion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_paisAdquisicion_patterns_, ))
                result = False
        return result
    validate_paisAdquisicion_patterns_ = [['^([0-9]{3})$']]
    def validate_tipoIdentificacionComprador(self, value):
        result = True
        # Validate type tipoIdentificacionComprador, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_tipoIdentificacionComprador_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_tipoIdentificacionComprador_patterns_, ))
                result = False
        return result
    validate_tipoIdentificacionComprador_patterns_ = [['^([0][4-8])$']]
    def validate_guiaRemision(self, value):
        result = True
        # Validate type guiaRemision, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_guiaRemision_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_guiaRemision_patterns_, ))
                result = False
        return result
    validate_guiaRemision_patterns_ = [['^([0-9]{3}-[0-9]{3}-[0-9]{9})$']]
    def validate_razonSocialComprador(self, value):
        result = True
        # Validate type razonSocialComprador, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on razonSocialComprador' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on razonSocialComprador' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_razonSocialComprador_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_razonSocialComprador_patterns_, ))
                result = False
        return result
    validate_razonSocialComprador_patterns_ = [['^([^\\n]*)$']]
    def validate_identificacionComprador(self, value):
        result = True
        # Validate type identificacionComprador, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on identificacionComprador' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on identificacionComprador' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_identificacionComprador_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_identificacionComprador_patterns_, ))
                result = False
        return result
    validate_identificacionComprador_patterns_ = [['^([^\\n]*)$']]
    def validate_direccionComprador(self, value):
        result = True
        # Validate type direccionComprador, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on direccionComprador' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on direccionComprador' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_direccionComprador_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_direccionComprador_patterns_, ))
                result = False
        return result
    validate_direccionComprador_patterns_ = [['^([^\\n]*)$']]
    def validate_totalSinImpuestos(self, value):
        result = True
        # Validate type totalSinImpuestos, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on totalSinImpuestos' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on totalSinImpuestos' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_totalSubsidio(self, value):
        result = True
        # Validate type totalSubsidio, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on totalSubsidio' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on totalSubsidio' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_incoTermTotalSinImpuestos(self, value):
        result = True
        # Validate type incoTermTotalSinImpuestos, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on incoTermTotalSinImpuestos' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on incoTermTotalSinImpuestos' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_incoTermTotalSinImpuestos_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_incoTermTotalSinImpuestos_patterns_, ))
                result = False
        return result
    validate_incoTermTotalSinImpuestos_patterns_ = [['^(([A-Z])*)$']]
    def validate_totalDescuentos(self, value):
        result = True
        # Validate type totalDescuentos, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on totalDescuentos' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_codigoDocumentoReembolso(self, value):
        result = True
        # Validate type codigoDocumentoReembolso, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoDocumentoReembolso_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoDocumentoReembolso_patterns_, ))
                result = False
        return result
    validate_codigoDocumentoReembolso_patterns_ = [['^([0-9]{2,3})$']]
    def validate_totalComprobantesReembolso(self, value):
        result = True
        # Validate type totalComprobantesReembolso, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on totalComprobantesReembolso' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on totalComprobantesReembolso' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_totalBaseImponibleReembolso(self, value):
        result = True
        # Validate type totalBaseImponibleReembolso, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on totalBaseImponibleReembolso' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on totalBaseImponibleReembolso' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_totalImpuestoReembolso(self, value):
        result = True
        # Validate type totalImpuestoReembolso, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on totalImpuestoReembolso' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on totalImpuestoReembolso' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_propina(self, value):
        result = True
        # Validate type propina, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on propina' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on propina' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_fleteInternacional(self, value):
        result = True
        # Validate type fleteInternacional, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on fleteInternacional' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on fleteInternacional' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_seguroInternacional(self, value):
        result = True
        # Validate type seguroInternacional, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on seguroInternacional' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on seguroInternacional' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_gastosAduaneros(self, value):
        result = True
        # Validate type gastosAduaneros, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on gastosAduaneros' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on gastosAduaneros' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_gastosTransporteOtros(self, value):
        result = True
        # Validate type gastosTransporteOtros, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on gastosTransporteOtros' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on gastosTransporteOtros' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_importeTotal(self, value):
        result = True
        # Validate type importeTotal, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on importeTotal' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on importeTotal' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_moneda(self, value):
        result = True
        # Validate type moneda, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 15:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on moneda' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on moneda' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_moneda_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_moneda_patterns_, ))
                result = False
        return result
    validate_moneda_patterns_ = [['^([^\\n]*)$']]
    def validate_placa(self, value):
        result = True
        # Validate type placa, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on placa' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on placa' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_placa_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_placa_patterns_, ))
                result = False
        return result
    validate_placa_patterns_ = [['^([^\\n]*)$']]
    def validate_valorRetIva(self, value):
        result = True
        # Validate type valorRetIva, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valorRetIva' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valorRetIva' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_valorRetRenta(self, value):
        result = True
        # Validate type valorRetRenta, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valorRetRenta' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valorRetRenta' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.fechaEmision is not None or
            self.dirEstablecimiento is not None or
            self.contribuyenteEspecial is not None or
            self.obligadoContabilidad is not None or
            self.comercioExterior is not None or
            self.incoTermFactura is not None or
            self.lugarIncoTerm is not None or
            self.paisOrigen is not None or
            self.puertoEmbarque is not None or
            self.puertoDestino is not None or
            self.paisDestino is not None or
            self.paisAdquisicion is not None or
            self.tipoIdentificacionComprador is not None or
            self.guiaRemision is not None or
            self.razonSocialComprador is not None or
            self.identificacionComprador is not None or
            self.direccionComprador is not None or
            self.totalSinImpuestos is not None or
            self.totalSubsidio is not None or
            self.incoTermTotalSinImpuestos is not None or
            self.totalDescuento is not None or
            self.codDocReembolso is not None or
            self.totalComprobantesReembolso is not None or
            self.totalBaseImponibleReembolso is not None or
            self.totalImpuestoReembolso is not None or
            self.totalConImpuestos is not None or
            self.compensaciones is not None or
            self.propina is not None or
            self.fleteInternacional is not None or
            self.seguroInternacional is not None or
            self.gastosAduaneros is not None or
            self.gastosTransporteOtros is not None or
            self.importeTotal is not None or
            self.moneda is not None or
            self.placa is not None or
            self.pagos is not None or
            self.valorRetIva is not None or
            self.valorRetRenta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoFacturaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoFacturaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoFacturaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoFacturaType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoFacturaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoFacturaType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoFacturaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.fechaEmision is not None:
            namespaceprefix_ = self.fechaEmision_nsprefix_ + ':' if (UseCapturedNS_ and self.fechaEmision_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfechaEmision>%s</%sfechaEmision>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.fechaEmision), input_name='fechaEmision')), namespaceprefix_ , eol_))
        if self.dirEstablecimiento is not None:
            namespaceprefix_ = self.dirEstablecimiento_nsprefix_ + ':' if (UseCapturedNS_ and self.dirEstablecimiento_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdirEstablecimiento>%s</%sdirEstablecimiento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dirEstablecimiento), input_name='dirEstablecimiento')), namespaceprefix_ , eol_))
        if self.contribuyenteEspecial is not None:
            namespaceprefix_ = self.contribuyenteEspecial_nsprefix_ + ':' if (UseCapturedNS_ and self.contribuyenteEspecial_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontribuyenteEspecial>%s</%scontribuyenteEspecial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contribuyenteEspecial), input_name='contribuyenteEspecial')), namespaceprefix_ , eol_))
        if self.obligadoContabilidad is not None:
            namespaceprefix_ = self.obligadoContabilidad_nsprefix_ + ':' if (UseCapturedNS_ and self.obligadoContabilidad_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobligadoContabilidad>%s</%sobligadoContabilidad>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.obligadoContabilidad), input_name='obligadoContabilidad')), namespaceprefix_ , eol_))
        if self.comercioExterior is not None:
            namespaceprefix_ = self.comercioExterior_nsprefix_ + ':' if (UseCapturedNS_ and self.comercioExterior_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomercioExterior>%s</%scomercioExterior>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.comercioExterior), input_name='comercioExterior')), namespaceprefix_ , eol_))
        if self.incoTermFactura is not None:
            namespaceprefix_ = self.incoTermFactura_nsprefix_ + ':' if (UseCapturedNS_ and self.incoTermFactura_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincoTermFactura>%s</%sincoTermFactura>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.incoTermFactura), input_name='incoTermFactura')), namespaceprefix_ , eol_))
        if self.lugarIncoTerm is not None:
            namespaceprefix_ = self.lugarIncoTerm_nsprefix_ + ':' if (UseCapturedNS_ and self.lugarIncoTerm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slugarIncoTerm>%s</%slugarIncoTerm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lugarIncoTerm), input_name='lugarIncoTerm')), namespaceprefix_ , eol_))
        if self.paisOrigen is not None:
            namespaceprefix_ = self.paisOrigen_nsprefix_ + ':' if (UseCapturedNS_ and self.paisOrigen_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spaisOrigen>%s</%spaisOrigen>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.paisOrigen), input_name='paisOrigen')), namespaceprefix_ , eol_))
        if self.puertoEmbarque is not None:
            namespaceprefix_ = self.puertoEmbarque_nsprefix_ + ':' if (UseCapturedNS_ and self.puertoEmbarque_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spuertoEmbarque>%s</%spuertoEmbarque>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.puertoEmbarque), input_name='puertoEmbarque')), namespaceprefix_ , eol_))
        if self.puertoDestino is not None:
            namespaceprefix_ = self.puertoDestino_nsprefix_ + ':' if (UseCapturedNS_ and self.puertoDestino_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spuertoDestino>%s</%spuertoDestino>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.puertoDestino), input_name='puertoDestino')), namespaceprefix_ , eol_))
        if self.paisDestino is not None:
            namespaceprefix_ = self.paisDestino_nsprefix_ + ':' if (UseCapturedNS_ and self.paisDestino_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spaisDestino>%s</%spaisDestino>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.paisDestino), input_name='paisDestino')), namespaceprefix_ , eol_))
        if self.paisAdquisicion is not None:
            namespaceprefix_ = self.paisAdquisicion_nsprefix_ + ':' if (UseCapturedNS_ and self.paisAdquisicion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spaisAdquisicion>%s</%spaisAdquisicion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.paisAdquisicion), input_name='paisAdquisicion')), namespaceprefix_ , eol_))
        if self.tipoIdentificacionComprador is not None:
            namespaceprefix_ = self.tipoIdentificacionComprador_nsprefix_ + ':' if (UseCapturedNS_ and self.tipoIdentificacionComprador_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoIdentificacionComprador>%s</%stipoIdentificacionComprador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tipoIdentificacionComprador), input_name='tipoIdentificacionComprador')), namespaceprefix_ , eol_))
        if self.guiaRemision is not None:
            namespaceprefix_ = self.guiaRemision_nsprefix_ + ':' if (UseCapturedNS_ and self.guiaRemision_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sguiaRemision>%s</%sguiaRemision>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.guiaRemision), input_name='guiaRemision')), namespaceprefix_ , eol_))
        if self.razonSocialComprador is not None:
            namespaceprefix_ = self.razonSocialComprador_nsprefix_ + ':' if (UseCapturedNS_ and self.razonSocialComprador_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srazonSocialComprador>%s</%srazonSocialComprador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.razonSocialComprador), input_name='razonSocialComprador')), namespaceprefix_ , eol_))
        if self.identificacionComprador is not None:
            namespaceprefix_ = self.identificacionComprador_nsprefix_ + ':' if (UseCapturedNS_ and self.identificacionComprador_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificacionComprador>%s</%sidentificacionComprador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identificacionComprador), input_name='identificacionComprador')), namespaceprefix_ , eol_))
        if self.direccionComprador is not None:
            namespaceprefix_ = self.direccionComprador_nsprefix_ + ':' if (UseCapturedNS_ and self.direccionComprador_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdireccionComprador>%s</%sdireccionComprador>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.direccionComprador), input_name='direccionComprador')), namespaceprefix_ , eol_))
        if self.totalSinImpuestos is not None:
            namespaceprefix_ = self.totalSinImpuestos_nsprefix_ + ':' if (UseCapturedNS_ and self.totalSinImpuestos_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalSinImpuestos>%s</%stotalSinImpuestos>%s' % (namespaceprefix_ , self.gds_format_decimal(self.totalSinImpuestos, input_name='totalSinImpuestos'), namespaceprefix_ , eol_))
        if self.totalSubsidio is not None:
            namespaceprefix_ = self.totalSubsidio_nsprefix_ + ':' if (UseCapturedNS_ and self.totalSubsidio_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalSubsidio>%s</%stotalSubsidio>%s' % (namespaceprefix_ , self.gds_format_decimal(self.totalSubsidio, input_name='totalSubsidio'), namespaceprefix_ , eol_))
        if self.incoTermTotalSinImpuestos is not None:
            namespaceprefix_ = self.incoTermTotalSinImpuestos_nsprefix_ + ':' if (UseCapturedNS_ and self.incoTermTotalSinImpuestos_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincoTermTotalSinImpuestos>%s</%sincoTermTotalSinImpuestos>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.incoTermTotalSinImpuestos), input_name='incoTermTotalSinImpuestos')), namespaceprefix_ , eol_))
        if self.totalDescuento is not None:
            namespaceprefix_ = self.totalDescuento_nsprefix_ + ':' if (UseCapturedNS_ and self.totalDescuento_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalDescuento>%s</%stotalDescuento>%s' % (namespaceprefix_ , self.gds_format_decimal(self.totalDescuento, input_name='totalDescuento'), namespaceprefix_ , eol_))
        if self.codDocReembolso is not None:
            namespaceprefix_ = self.codDocReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.codDocReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodDocReembolso>%s</%scodDocReembolso>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codDocReembolso), input_name='codDocReembolso')), namespaceprefix_ , eol_))
        if self.totalComprobantesReembolso is not None:
            namespaceprefix_ = self.totalComprobantesReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.totalComprobantesReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalComprobantesReembolso>%s</%stotalComprobantesReembolso>%s' % (namespaceprefix_ , self.gds_format_decimal(self.totalComprobantesReembolso, input_name='totalComprobantesReembolso'), namespaceprefix_ , eol_))
        if self.totalBaseImponibleReembolso is not None:
            namespaceprefix_ = self.totalBaseImponibleReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.totalBaseImponibleReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalBaseImponibleReembolso>%s</%stotalBaseImponibleReembolso>%s' % (namespaceprefix_ , self.gds_format_decimal(self.totalBaseImponibleReembolso, input_name='totalBaseImponibleReembolso'), namespaceprefix_ , eol_))
        if self.totalImpuestoReembolso is not None:
            namespaceprefix_ = self.totalImpuestoReembolso_nsprefix_ + ':' if (UseCapturedNS_ and self.totalImpuestoReembolso_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalImpuestoReembolso>%s</%stotalImpuestoReembolso>%s' % (namespaceprefix_ , self.gds_format_decimal(self.totalImpuestoReembolso, input_name='totalImpuestoReembolso'), namespaceprefix_ , eol_))
        if self.totalConImpuestos is not None:
            namespaceprefix_ = self.totalConImpuestos_nsprefix_ + ':' if (UseCapturedNS_ and self.totalConImpuestos_nsprefix_) else ''
            self.totalConImpuestos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='totalConImpuestos', pretty_print=pretty_print)
        if self.compensaciones is not None:
            namespaceprefix_ = self.compensaciones_nsprefix_ + ':' if (UseCapturedNS_ and self.compensaciones_nsprefix_) else ''
            self.compensaciones.export(outfile, level, namespaceprefix_, namespacedef_='', name_='compensaciones', pretty_print=pretty_print)
        if self.propina is not None:
            namespaceprefix_ = self.propina_nsprefix_ + ':' if (UseCapturedNS_ and self.propina_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spropina>%s</%spropina>%s' % (namespaceprefix_ , self.gds_format_decimal(self.propina, input_name='propina'), namespaceprefix_ , eol_))
        if self.fleteInternacional is not None:
            namespaceprefix_ = self.fleteInternacional_nsprefix_ + ':' if (UseCapturedNS_ and self.fleteInternacional_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfleteInternacional>%s</%sfleteInternacional>%s' % (namespaceprefix_ , self.gds_format_decimal(self.fleteInternacional, input_name='fleteInternacional'), namespaceprefix_ , eol_))
        if self.seguroInternacional is not None:
            namespaceprefix_ = self.seguroInternacional_nsprefix_ + ':' if (UseCapturedNS_ and self.seguroInternacional_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sseguroInternacional>%s</%sseguroInternacional>%s' % (namespaceprefix_ , self.gds_format_decimal(self.seguroInternacional, input_name='seguroInternacional'), namespaceprefix_ , eol_))
        if self.gastosAduaneros is not None:
            namespaceprefix_ = self.gastosAduaneros_nsprefix_ + ':' if (UseCapturedNS_ and self.gastosAduaneros_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgastosAduaneros>%s</%sgastosAduaneros>%s' % (namespaceprefix_ , self.gds_format_decimal(self.gastosAduaneros, input_name='gastosAduaneros'), namespaceprefix_ , eol_))
        if self.gastosTransporteOtros is not None:
            namespaceprefix_ = self.gastosTransporteOtros_nsprefix_ + ':' if (UseCapturedNS_ and self.gastosTransporteOtros_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgastosTransporteOtros>%s</%sgastosTransporteOtros>%s' % (namespaceprefix_ , self.gds_format_decimal(self.gastosTransporteOtros, input_name='gastosTransporteOtros'), namespaceprefix_ , eol_))
        if self.importeTotal is not None:
            namespaceprefix_ = self.importeTotal_nsprefix_ + ':' if (UseCapturedNS_ and self.importeTotal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simporteTotal>%s</%simporteTotal>%s' % (namespaceprefix_ , self.gds_format_decimal(self.importeTotal, input_name='importeTotal'), namespaceprefix_ , eol_))
        if self.moneda is not None:
            namespaceprefix_ = self.moneda_nsprefix_ + ':' if (UseCapturedNS_ and self.moneda_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smoneda>%s</%smoneda>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.moneda), input_name='moneda')), namespaceprefix_ , eol_))
        if self.placa is not None:
            namespaceprefix_ = self.placa_nsprefix_ + ':' if (UseCapturedNS_ and self.placa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splaca>%s</%splaca>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.placa), input_name='placa')), namespaceprefix_ , eol_))
        if self.pagos is not None:
            namespaceprefix_ = self.pagos_nsprefix_ + ':' if (UseCapturedNS_ and self.pagos_nsprefix_) else ''
            self.pagos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='pagos', pretty_print=pretty_print)
        if self.valorRetIva is not None:
            namespaceprefix_ = self.valorRetIva_nsprefix_ + ':' if (UseCapturedNS_ and self.valorRetIva_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorRetIva>%s</%svalorRetIva>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valorRetIva, input_name='valorRetIva'), namespaceprefix_ , eol_))
        if self.valorRetRenta is not None:
            namespaceprefix_ = self.valorRetRenta_nsprefix_ + ':' if (UseCapturedNS_ and self.valorRetRenta_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorRetRenta>%s</%svalorRetRenta>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valorRetRenta, input_name='valorRetRenta'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'fechaEmision':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'fechaEmision')
            value_ = self.gds_validate_string(value_, node, 'fechaEmision')
            self.fechaEmision = value_
            self.fechaEmision_nsprefix_ = child_.prefix
            # validate type fechaEmision
            self.validate_fechaEmision(self.fechaEmision)
        elif nodeName_ == 'dirEstablecimiento':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dirEstablecimiento')
            value_ = self.gds_validate_string(value_, node, 'dirEstablecimiento')
            self.dirEstablecimiento = value_
            self.dirEstablecimiento_nsprefix_ = child_.prefix
            # validate type dirEstablecimiento
            self.validate_dirEstablecimiento(self.dirEstablecimiento)
        elif nodeName_ == 'contribuyenteEspecial':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contribuyenteEspecial')
            value_ = self.gds_validate_string(value_, node, 'contribuyenteEspecial')
            self.contribuyenteEspecial = value_
            self.contribuyenteEspecial_nsprefix_ = child_.prefix
            # validate type contribuyenteEspecial
            self.validate_contribuyenteEspecial(self.contribuyenteEspecial)
        elif nodeName_ == 'obligadoContabilidad':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'obligadoContabilidad')
            value_ = self.gds_validate_string(value_, node, 'obligadoContabilidad')
            self.obligadoContabilidad = value_
            self.obligadoContabilidad_nsprefix_ = child_.prefix
            # validate type obligadoContabilidad
            self.validate_obligadoContabilidad(self.obligadoContabilidad)
        elif nodeName_ == 'comercioExterior':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'comercioExterior')
            value_ = self.gds_validate_string(value_, node, 'comercioExterior')
            self.comercioExterior = value_
            self.comercioExterior_nsprefix_ = child_.prefix
            # validate type comercioExterior
            self.validate_comercioExterior(self.comercioExterior)
        elif nodeName_ == 'incoTermFactura':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'incoTermFactura')
            value_ = self.gds_validate_string(value_, node, 'incoTermFactura')
            self.incoTermFactura = value_
            self.incoTermFactura_nsprefix_ = child_.prefix
            # validate type incoTermFactura
            self.validate_incoTermFactura(self.incoTermFactura)
        elif nodeName_ == 'lugarIncoTerm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lugarIncoTerm')
            value_ = self.gds_validate_string(value_, node, 'lugarIncoTerm')
            self.lugarIncoTerm = value_
            self.lugarIncoTerm_nsprefix_ = child_.prefix
            # validate type lugarIncoTerm
            self.validate_lugarIncoTerm(self.lugarIncoTerm)
        elif nodeName_ == 'paisOrigen':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'paisOrigen')
            value_ = self.gds_validate_string(value_, node, 'paisOrigen')
            self.paisOrigen = value_
            self.paisOrigen_nsprefix_ = child_.prefix
            # validate type paisOrigen
            self.validate_paisOrigen(self.paisOrigen)
        elif nodeName_ == 'puertoEmbarque':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'puertoEmbarque')
            value_ = self.gds_validate_string(value_, node, 'puertoEmbarque')
            self.puertoEmbarque = value_
            self.puertoEmbarque_nsprefix_ = child_.prefix
            # validate type puertoEmbarque
            self.validate_puertoEmbarque(self.puertoEmbarque)
        elif nodeName_ == 'puertoDestino':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'puertoDestino')
            value_ = self.gds_validate_string(value_, node, 'puertoDestino')
            self.puertoDestino = value_
            self.puertoDestino_nsprefix_ = child_.prefix
            # validate type puertoDestino
            self.validate_puertoDestino(self.puertoDestino)
        elif nodeName_ == 'paisDestino':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'paisDestino')
            value_ = self.gds_validate_string(value_, node, 'paisDestino')
            self.paisDestino = value_
            self.paisDestino_nsprefix_ = child_.prefix
            # validate type paisDestino
            self.validate_paisDestino(self.paisDestino)
        elif nodeName_ == 'paisAdquisicion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'paisAdquisicion')
            value_ = self.gds_validate_string(value_, node, 'paisAdquisicion')
            self.paisAdquisicion = value_
            self.paisAdquisicion_nsprefix_ = child_.prefix
            # validate type paisAdquisicion
            self.validate_paisAdquisicion(self.paisAdquisicion)
        elif nodeName_ == 'tipoIdentificacionComprador':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'tipoIdentificacionComprador')
            value_ = self.gds_validate_string(value_, node, 'tipoIdentificacionComprador')
            self.tipoIdentificacionComprador = value_
            self.tipoIdentificacionComprador_nsprefix_ = child_.prefix
            # validate type tipoIdentificacionComprador
            self.validate_tipoIdentificacionComprador(self.tipoIdentificacionComprador)
        elif nodeName_ == 'guiaRemision':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'guiaRemision')
            value_ = self.gds_validate_string(value_, node, 'guiaRemision')
            self.guiaRemision = value_
            self.guiaRemision_nsprefix_ = child_.prefix
            # validate type guiaRemision
            self.validate_guiaRemision(self.guiaRemision)
        elif nodeName_ == 'razonSocialComprador':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'razonSocialComprador')
            value_ = self.gds_validate_string(value_, node, 'razonSocialComprador')
            self.razonSocialComprador = value_
            self.razonSocialComprador_nsprefix_ = child_.prefix
            # validate type razonSocialComprador
            self.validate_razonSocialComprador(self.razonSocialComprador)
        elif nodeName_ == 'identificacionComprador':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identificacionComprador')
            value_ = self.gds_validate_string(value_, node, 'identificacionComprador')
            self.identificacionComprador = value_
            self.identificacionComprador_nsprefix_ = child_.prefix
            # validate type identificacionComprador
            self.validate_identificacionComprador(self.identificacionComprador)
        elif nodeName_ == 'direccionComprador':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'direccionComprador')
            value_ = self.gds_validate_string(value_, node, 'direccionComprador')
            self.direccionComprador = value_
            self.direccionComprador_nsprefix_ = child_.prefix
            # validate type direccionComprador
            self.validate_direccionComprador(self.direccionComprador)
        elif nodeName_ == 'totalSinImpuestos' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'totalSinImpuestos')
            fval_ = self.gds_validate_decimal(fval_, node, 'totalSinImpuestos')
            self.totalSinImpuestos = fval_
            self.totalSinImpuestos_nsprefix_ = child_.prefix
            # validate type totalSinImpuestos
            self.validate_totalSinImpuestos(self.totalSinImpuestos)
        elif nodeName_ == 'totalSubsidio' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'totalSubsidio')
            fval_ = self.gds_validate_decimal(fval_, node, 'totalSubsidio')
            self.totalSubsidio = fval_
            self.totalSubsidio_nsprefix_ = child_.prefix
            # validate type totalSubsidio
            self.validate_totalSubsidio(self.totalSubsidio)
        elif nodeName_ == 'incoTermTotalSinImpuestos':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'incoTermTotalSinImpuestos')
            value_ = self.gds_validate_string(value_, node, 'incoTermTotalSinImpuestos')
            self.incoTermTotalSinImpuestos = value_
            self.incoTermTotalSinImpuestos_nsprefix_ = child_.prefix
            # validate type incoTermTotalSinImpuestos
            self.validate_incoTermTotalSinImpuestos(self.incoTermTotalSinImpuestos)
        elif nodeName_ == 'totalDescuento' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'totalDescuento')
            fval_ = self.gds_validate_decimal(fval_, node, 'totalDescuento')
            self.totalDescuento = fval_
            self.totalDescuento_nsprefix_ = child_.prefix
            # validate type totalDescuentos
            self.validate_totalDescuentos(self.totalDescuento)
        elif nodeName_ == 'codDocReembolso':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codDocReembolso')
            value_ = self.gds_validate_string(value_, node, 'codDocReembolso')
            self.codDocReembolso = value_
            self.codDocReembolso_nsprefix_ = child_.prefix
            # validate type codigoDocumentoReembolso
            self.validate_codigoDocumentoReembolso(self.codDocReembolso)
        elif nodeName_ == 'totalComprobantesReembolso' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'totalComprobantesReembolso')
            fval_ = self.gds_validate_decimal(fval_, node, 'totalComprobantesReembolso')
            self.totalComprobantesReembolso = fval_
            self.totalComprobantesReembolso_nsprefix_ = child_.prefix
            # validate type totalComprobantesReembolso
            self.validate_totalComprobantesReembolso(self.totalComprobantesReembolso)
        elif nodeName_ == 'totalBaseImponibleReembolso' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'totalBaseImponibleReembolso')
            fval_ = self.gds_validate_decimal(fval_, node, 'totalBaseImponibleReembolso')
            self.totalBaseImponibleReembolso = fval_
            self.totalBaseImponibleReembolso_nsprefix_ = child_.prefix
            # validate type totalBaseImponibleReembolso
            self.validate_totalBaseImponibleReembolso(self.totalBaseImponibleReembolso)
        elif nodeName_ == 'totalImpuestoReembolso' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'totalImpuestoReembolso')
            fval_ = self.gds_validate_decimal(fval_, node, 'totalImpuestoReembolso')
            self.totalImpuestoReembolso = fval_
            self.totalImpuestoReembolso_nsprefix_ = child_.prefix
            # validate type totalImpuestoReembolso
            self.validate_totalImpuestoReembolso(self.totalImpuestoReembolso)
        elif nodeName_ == 'totalConImpuestos':
            obj_ = totalConImpuestosType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.totalConImpuestos = obj_
            obj_.original_tagname_ = 'totalConImpuestos'
        elif nodeName_ == 'compensaciones':
            obj_ = compensaciones.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.compensaciones = obj_
            obj_.original_tagname_ = 'compensaciones'
        elif nodeName_ == 'propina' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'propina')
            fval_ = self.gds_validate_decimal(fval_, node, 'propina')
            self.propina = fval_
            self.propina_nsprefix_ = child_.prefix
            # validate type propina
            self.validate_propina(self.propina)
        elif nodeName_ == 'fleteInternacional' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'fleteInternacional')
            fval_ = self.gds_validate_decimal(fval_, node, 'fleteInternacional')
            self.fleteInternacional = fval_
            self.fleteInternacional_nsprefix_ = child_.prefix
            # validate type fleteInternacional
            self.validate_fleteInternacional(self.fleteInternacional)
        elif nodeName_ == 'seguroInternacional' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'seguroInternacional')
            fval_ = self.gds_validate_decimal(fval_, node, 'seguroInternacional')
            self.seguroInternacional = fval_
            self.seguroInternacional_nsprefix_ = child_.prefix
            # validate type seguroInternacional
            self.validate_seguroInternacional(self.seguroInternacional)
        elif nodeName_ == 'gastosAduaneros' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'gastosAduaneros')
            fval_ = self.gds_validate_decimal(fval_, node, 'gastosAduaneros')
            self.gastosAduaneros = fval_
            self.gastosAduaneros_nsprefix_ = child_.prefix
            # validate type gastosAduaneros
            self.validate_gastosAduaneros(self.gastosAduaneros)
        elif nodeName_ == 'gastosTransporteOtros' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'gastosTransporteOtros')
            fval_ = self.gds_validate_decimal(fval_, node, 'gastosTransporteOtros')
            self.gastosTransporteOtros = fval_
            self.gastosTransporteOtros_nsprefix_ = child_.prefix
            # validate type gastosTransporteOtros
            self.validate_gastosTransporteOtros(self.gastosTransporteOtros)
        elif nodeName_ == 'importeTotal' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'importeTotal')
            fval_ = self.gds_validate_decimal(fval_, node, 'importeTotal')
            self.importeTotal = fval_
            self.importeTotal_nsprefix_ = child_.prefix
            # validate type importeTotal
            self.validate_importeTotal(self.importeTotal)
        elif nodeName_ == 'moneda':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'moneda')
            value_ = self.gds_validate_string(value_, node, 'moneda')
            self.moneda = value_
            self.moneda_nsprefix_ = child_.prefix
            # validate type moneda
            self.validate_moneda(self.moneda)
        elif nodeName_ == 'placa':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'placa')
            value_ = self.gds_validate_string(value_, node, 'placa')
            self.placa = value_
            self.placa_nsprefix_ = child_.prefix
            # validate type placa
            self.validate_placa(self.placa)
        elif nodeName_ == 'pagos':
            obj_ = pagos.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.pagos = obj_
            obj_.original_tagname_ = 'pagos'
        elif nodeName_ == 'valorRetIva' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valorRetIva')
            fval_ = self.gds_validate_decimal(fval_, node, 'valorRetIva')
            self.valorRetIva = fval_
            self.valorRetIva_nsprefix_ = child_.prefix
            # validate type valorRetIva
            self.validate_valorRetIva(self.valorRetIva)
        elif nodeName_ == 'valorRetRenta' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valorRetRenta')
            fval_ = self.gds_validate_decimal(fval_, node, 'valorRetRenta')
            self.valorRetRenta = fval_
            self.valorRetRenta_nsprefix_ = child_.prefix
            # validate type valorRetRenta
            self.validate_valorRetRenta(self.valorRetRenta)
# end class infoFacturaType


class totalConImpuestosType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, totalImpuesto=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if totalImpuesto is None:
            self.totalImpuesto = []
        else:
            self.totalImpuesto = totalImpuesto
        self.totalImpuesto_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, totalConImpuestosType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if totalConImpuestosType.subclass:
            return totalConImpuestosType.subclass(*args_, **kwargs_)
        else:
            return totalConImpuestosType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_totalImpuesto(self):
        return self.totalImpuesto
    def set_totalImpuesto(self, totalImpuesto):
        self.totalImpuesto = totalImpuesto
    def add_totalImpuesto(self, value):
        self.totalImpuesto.append(value)
    def insert_totalImpuesto_at(self, index, value):
        self.totalImpuesto.insert(index, value)
    def replace_totalImpuesto_at(self, index, value):
        self.totalImpuesto[index] = value
    def has__content(self):
        if (
            self.totalImpuesto
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='totalConImpuestosType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('totalConImpuestosType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'totalConImpuestosType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='totalConImpuestosType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='totalConImpuestosType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='totalConImpuestosType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='totalConImpuestosType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for totalImpuesto_ in self.totalImpuesto:
            namespaceprefix_ = self.totalImpuesto_nsprefix_ + ':' if (UseCapturedNS_ and self.totalImpuesto_nsprefix_) else ''
            totalImpuesto_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='totalImpuesto', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'totalImpuesto':
            obj_ = totalImpuestoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.totalImpuesto.append(obj_)
            obj_.original_tagname_ = 'totalImpuesto'
# end class totalConImpuestosType


class totalImpuestoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codigo=None, codigoPorcentaje=None, descuentoAdicional=None, baseImponible=None, tarifa=None, valor=None, valorDevolucionIva=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codigo = codigo
        self.validate_codigo(self.codigo)
        self.codigo_nsprefix_ = None
        self.codigoPorcentaje = codigoPorcentaje
        self.validate_codigoPorcentaje(self.codigoPorcentaje)
        self.codigoPorcentaje_nsprefix_ = None
        self.descuentoAdicional = descuentoAdicional
        self.validate_descuentoAdicional(self.descuentoAdicional)
        self.descuentoAdicional_nsprefix_ = None
        self.baseImponible = baseImponible
        self.validate_baseImponible(self.baseImponible)
        self.baseImponible_nsprefix_ = None
        self.tarifa = tarifa
        self.validate_tarifa(self.tarifa)
        self.tarifa_nsprefix_ = None
        self.valor = valor
        self.validate_valor(self.valor)
        self.valor_nsprefix_ = None
        self.valorDevolucionIva = valorDevolucionIva
        self.validate_valorDevolucionIva(self.valorDevolucionIva)
        self.valorDevolucionIva_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, totalImpuestoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if totalImpuestoType.subclass:
            return totalImpuestoType.subclass(*args_, **kwargs_)
        else:
            return totalImpuestoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codigo(self):
        return self.codigo
    def set_codigo(self, codigo):
        self.codigo = codigo
    def get_codigoPorcentaje(self):
        return self.codigoPorcentaje
    def set_codigoPorcentaje(self, codigoPorcentaje):
        self.codigoPorcentaje = codigoPorcentaje
    def get_descuentoAdicional(self):
        return self.descuentoAdicional
    def set_descuentoAdicional(self, descuentoAdicional):
        self.descuentoAdicional = descuentoAdicional
    def get_baseImponible(self):
        return self.baseImponible
    def set_baseImponible(self, baseImponible):
        self.baseImponible = baseImponible
    def get_tarifa(self):
        return self.tarifa
    def set_tarifa(self, tarifa):
        self.tarifa = tarifa
    def get_valor(self):
        return self.valor
    def set_valor(self, valor):
        self.valor = valor
    def get_valorDevolucionIva(self):
        return self.valorDevolucionIva
    def set_valorDevolucionIva(self, valorDevolucionIva):
        self.valorDevolucionIva = valorDevolucionIva
    def validate_codigo(self, value):
        result = True
        # Validate type codigo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on codigo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on codigo' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigo_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigo_patterns_, ))
                result = False
        return result
    validate_codigo_patterns_ = [['^([235])$']]
    def validate_codigoPorcentaje(self, value):
        result = True
        # Validate type codigoPorcentaje, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on codigoPorcentaje' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on codigoPorcentaje' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoPorcentaje_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoPorcentaje_patterns_, ))
                result = False
        return result
    validate_codigoPorcentaje_patterns_ = [['^([0-9]+)$']]
    def validate_descuentoAdicional(self, value):
        result = True
        # Validate type descuentoAdicional, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on descuentoAdicional' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_baseImponible(self, value):
        result = True
        # Validate type baseImponible, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on baseImponible' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on baseImponible' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_tarifa(self, value):
        result = True
        # Validate type tarifa, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on tarifa' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_valor(self, value):
        result = True
        # Validate type valor, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valor' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valor' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_valorDevolucionIva(self, value):
        result = True
        # Validate type valorDevolucionIva, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valorDevolucionIva' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valorDevolucionIva' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.codigo is not None or
            self.codigoPorcentaje is not None or
            self.descuentoAdicional is not None or
            self.baseImponible is not None or
            self.tarifa is not None or
            self.valor is not None or
            self.valorDevolucionIva is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='totalImpuestoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('totalImpuestoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'totalImpuestoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='totalImpuestoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='totalImpuestoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='totalImpuestoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='totalImpuestoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigo is not None:
            namespaceprefix_ = self.codigo_nsprefix_ + ':' if (UseCapturedNS_ and self.codigo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigo>%s</%scodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigo), input_name='codigo')), namespaceprefix_ , eol_))
        if self.codigoPorcentaje is not None:
            namespaceprefix_ = self.codigoPorcentaje_nsprefix_ + ':' if (UseCapturedNS_ and self.codigoPorcentaje_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPorcentaje>%s</%scodigoPorcentaje>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigoPorcentaje), input_name='codigoPorcentaje')), namespaceprefix_ , eol_))
        if self.descuentoAdicional is not None:
            namespaceprefix_ = self.descuentoAdicional_nsprefix_ + ':' if (UseCapturedNS_ and self.descuentoAdicional_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescuentoAdicional>%s</%sdescuentoAdicional>%s' % (namespaceprefix_ , self.gds_format_decimal(self.descuentoAdicional, input_name='descuentoAdicional'), namespaceprefix_ , eol_))
        if self.baseImponible is not None:
            namespaceprefix_ = self.baseImponible_nsprefix_ + ':' if (UseCapturedNS_ and self.baseImponible_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbaseImponible>%s</%sbaseImponible>%s' % (namespaceprefix_ , self.gds_format_decimal(self.baseImponible, input_name='baseImponible'), namespaceprefix_ , eol_))
        if self.tarifa is not None:
            namespaceprefix_ = self.tarifa_nsprefix_ + ':' if (UseCapturedNS_ and self.tarifa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%starifa>%s</%starifa>%s' % (namespaceprefix_ , self.gds_format_decimal(self.tarifa, input_name='tarifa'), namespaceprefix_ , eol_))
        if self.valor is not None:
            namespaceprefix_ = self.valor_nsprefix_ + ':' if (UseCapturedNS_ and self.valor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalor>%s</%svalor>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valor, input_name='valor'), namespaceprefix_ , eol_))
        if self.valorDevolucionIva is not None:
            namespaceprefix_ = self.valorDevolucionIva_nsprefix_ + ':' if (UseCapturedNS_ and self.valorDevolucionIva_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorDevolucionIva>%s</%svalorDevolucionIva>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valorDevolucionIva, input_name='valorDevolucionIva'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codigo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigo')
            value_ = self.gds_validate_string(value_, node, 'codigo')
            self.codigo = value_
            self.codigo_nsprefix_ = child_.prefix
            # validate type codigo
            self.validate_codigo(self.codigo)
        elif nodeName_ == 'codigoPorcentaje':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigoPorcentaje')
            value_ = self.gds_validate_string(value_, node, 'codigoPorcentaje')
            self.codigoPorcentaje = value_
            self.codigoPorcentaje_nsprefix_ = child_.prefix
            # validate type codigoPorcentaje
            self.validate_codigoPorcentaje(self.codigoPorcentaje)
        elif nodeName_ == 'descuentoAdicional' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'descuentoAdicional')
            fval_ = self.gds_validate_decimal(fval_, node, 'descuentoAdicional')
            self.descuentoAdicional = fval_
            self.descuentoAdicional_nsprefix_ = child_.prefix
            # validate type descuentoAdicional
            self.validate_descuentoAdicional(self.descuentoAdicional)
        elif nodeName_ == 'baseImponible' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'baseImponible')
            fval_ = self.gds_validate_decimal(fval_, node, 'baseImponible')
            self.baseImponible = fval_
            self.baseImponible_nsprefix_ = child_.prefix
            # validate type baseImponible
            self.validate_baseImponible(self.baseImponible)
        elif nodeName_ == 'tarifa' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'tarifa')
            fval_ = self.gds_validate_decimal(fval_, node, 'tarifa')
            self.tarifa = fval_
            self.tarifa_nsprefix_ = child_.prefix
            # validate type tarifa
            self.validate_tarifa(self.tarifa)
        elif nodeName_ == 'valor' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valor')
            fval_ = self.gds_validate_decimal(fval_, node, 'valor')
            self.valor = fval_
            self.valor_nsprefix_ = child_.prefix
            # validate type valor
            self.validate_valor(self.valor)
        elif nodeName_ == 'valorDevolucionIva' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valorDevolucionIva')
            fval_ = self.gds_validate_decimal(fval_, node, 'valorDevolucionIva')
            self.valorDevolucionIva = fval_
            self.valorDevolucionIva_nsprefix_ = child_.prefix
            # validate type valorDevolucionIva
            self.validate_valorDevolucionIva(self.valorDevolucionIva)
# end class totalImpuestoType


class detallesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, detalle=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if detalle is None:
            self.detalle = []
        else:
            self.detalle = detalle
        self.detalle_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detallesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detallesType.subclass:
            return detallesType.subclass(*args_, **kwargs_)
        else:
            return detallesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_detalle(self):
        return self.detalle
    def set_detalle(self, detalle):
        self.detalle = detalle
    def add_detalle(self, value):
        self.detalle.append(value)
    def insert_detalle_at(self, index, value):
        self.detalle.insert(index, value)
    def replace_detalle_at(self, index, value):
        self.detalle[index] = value
    def has__content(self):
        if (
            self.detalle
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detallesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detallesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detallesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detallesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detallesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detallesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detallesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for detalle_ in self.detalle:
            namespaceprefix_ = self.detalle_nsprefix_ + ':' if (UseCapturedNS_ and self.detalle_nsprefix_) else ''
            detalle_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detalle', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'detalle':
            obj_ = detalleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detalle.append(obj_)
            obj_.original_tagname_ = 'detalle'
# end class detallesType


class detalleType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codigoPrincipal=None, codigoAuxiliar=None, descripcion=None, unidadMedida=None, cantidad=None, precioUnitario=None, precioSinSubsidio=None, descuento=None, precioTotalSinImpuesto=None, detallesAdicionales=None, impuestos=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codigoPrincipal = codigoPrincipal
        self.validate_codigoPrincipal(self.codigoPrincipal)
        self.codigoPrincipal_nsprefix_ = None
        self.codigoAuxiliar = codigoAuxiliar
        self.validate_codigoAuxiliar(self.codigoAuxiliar)
        self.codigoAuxiliar_nsprefix_ = None
        self.descripcion = descripcion
        self.validate_descripcion(self.descripcion)
        self.descripcion_nsprefix_ = None
        self.unidadMedida = unidadMedida
        self.validate_unidadMedida(self.unidadMedida)
        self.unidadMedida_nsprefix_ = None
        self.cantidad = cantidad
        self.validate_cantidad(self.cantidad)
        self.cantidad_nsprefix_ = None
        self.precioUnitario = precioUnitario
        self.validate_precioUnitario(self.precioUnitario)
        self.precioUnitario_nsprefix_ = None
        self.precioSinSubsidio = precioSinSubsidio
        self.validate_precioSinSubsidio(self.precioSinSubsidio)
        self.precioSinSubsidio_nsprefix_ = None
        self.descuento = descuento
        self.validate_descuento(self.descuento)
        self.descuento_nsprefix_ = None
        self.precioTotalSinImpuesto = precioTotalSinImpuesto
        self.validate_precioTotalSinImpuesto(self.precioTotalSinImpuesto)
        self.precioTotalSinImpuesto_nsprefix_ = None
        self.detallesAdicionales = detallesAdicionales
        self.detallesAdicionales_nsprefix_ = None
        self.impuestos = impuestos
        self.impuestos_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detalleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detalleType.subclass:
            return detalleType.subclass(*args_, **kwargs_)
        else:
            return detalleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codigoPrincipal(self):
        return self.codigoPrincipal
    def set_codigoPrincipal(self, codigoPrincipal):
        self.codigoPrincipal = codigoPrincipal
    def get_codigoAuxiliar(self):
        return self.codigoAuxiliar
    def set_codigoAuxiliar(self, codigoAuxiliar):
        self.codigoAuxiliar = codigoAuxiliar
    def get_descripcion(self):
        return self.descripcion
    def set_descripcion(self, descripcion):
        self.descripcion = descripcion
    def get_unidadMedida(self):
        return self.unidadMedida
    def set_unidadMedida(self, unidadMedida):
        self.unidadMedida = unidadMedida
    def get_cantidad(self):
        return self.cantidad
    def set_cantidad(self, cantidad):
        self.cantidad = cantidad
    def get_precioUnitario(self):
        return self.precioUnitario
    def set_precioUnitario(self, precioUnitario):
        self.precioUnitario = precioUnitario
    def get_precioSinSubsidio(self):
        return self.precioSinSubsidio
    def set_precioSinSubsidio(self, precioSinSubsidio):
        self.precioSinSubsidio = precioSinSubsidio
    def get_descuento(self):
        return self.descuento
    def set_descuento(self, descuento):
        self.descuento = descuento
    def get_precioTotalSinImpuesto(self):
        return self.precioTotalSinImpuesto
    def set_precioTotalSinImpuesto(self, precioTotalSinImpuesto):
        self.precioTotalSinImpuesto = precioTotalSinImpuesto
    def get_detallesAdicionales(self):
        return self.detallesAdicionales
    def set_detallesAdicionales(self, detallesAdicionales):
        self.detallesAdicionales = detallesAdicionales
    def get_impuestos(self):
        return self.impuestos
    def set_impuestos(self, impuestos):
        self.impuestos = impuestos
    def validate_codigoPrincipal(self, value):
        result = True
        # Validate type codigoPrincipal, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on codigoPrincipal' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on codigoPrincipal' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoPrincipal_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoPrincipal_patterns_, ))
                result = False
        return result
    validate_codigoPrincipal_patterns_ = [['^([^\\n]*)$']]
    def validate_codigoAuxiliar(self, value):
        result = True
        # Validate type codigoAuxiliar, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on codigoAuxiliar' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on codigoAuxiliar' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoAuxiliar_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoAuxiliar_patterns_, ))
                result = False
        return result
    validate_codigoAuxiliar_patterns_ = [['^([^\\n]*)$']]
    def validate_descripcion(self, value):
        result = True
        # Validate type descripcion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on descripcion' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on descripcion' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_descripcion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_descripcion_patterns_, ))
                result = False
        return result
    validate_descripcion_patterns_ = [['^([^\\n]*)$']]
    def validate_unidadMedida(self, value):
        result = True
        # Validate type unidadMedida, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on unidadMedida' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on unidadMedida' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_unidadMedida_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_unidadMedida_patterns_, ))
                result = False
        return result
    validate_unidadMedida_patterns_ = [['^([^\\n]*)$']]
    def validate_cantidad(self, value):
        result = True
        # Validate type cantidad, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on cantidad' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on cantidad' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_precioUnitario(self, value):
        result = True
        # Validate type precioUnitario, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on precioUnitario' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on precioUnitario' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_precioSinSubsidio(self, value):
        result = True
        # Validate type precioSinSubsidio, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on precioSinSubsidio' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on precioSinSubsidio' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_descuento(self, value):
        result = True
        # Validate type descuento, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on descuento' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on descuento' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_precioTotalSinImpuesto(self, value):
        result = True
        # Validate type precioTotalSinImpuesto, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on precioTotalSinImpuesto' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on precioTotalSinImpuesto' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.codigoPrincipal is not None or
            self.codigoAuxiliar is not None or
            self.descripcion is not None or
            self.unidadMedida is not None or
            self.cantidad is not None or
            self.precioUnitario is not None or
            self.precioSinSubsidio is not None or
            self.descuento is not None or
            self.precioTotalSinImpuesto is not None or
            self.detallesAdicionales is not None or
            self.impuestos is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detalleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detalleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detalleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detalleType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detalleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detalleType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detalleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoPrincipal is not None:
            namespaceprefix_ = self.codigoPrincipal_nsprefix_ + ':' if (UseCapturedNS_ and self.codigoPrincipal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPrincipal>%s</%scodigoPrincipal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigoPrincipal), input_name='codigoPrincipal')), namespaceprefix_ , eol_))
        if self.codigoAuxiliar is not None:
            namespaceprefix_ = self.codigoAuxiliar_nsprefix_ + ':' if (UseCapturedNS_ and self.codigoAuxiliar_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoAuxiliar>%s</%scodigoAuxiliar>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigoAuxiliar), input_name='codigoAuxiliar')), namespaceprefix_ , eol_))
        if self.descripcion is not None:
            namespaceprefix_ = self.descripcion_nsprefix_ + ':' if (UseCapturedNS_ and self.descripcion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescripcion>%s</%sdescripcion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.descripcion), input_name='descripcion')), namespaceprefix_ , eol_))
        if self.unidadMedida is not None:
            namespaceprefix_ = self.unidadMedida_nsprefix_ + ':' if (UseCapturedNS_ and self.unidadMedida_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunidadMedida>%s</%sunidadMedida>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.unidadMedida), input_name='unidadMedida')), namespaceprefix_ , eol_))
        if self.cantidad is not None:
            namespaceprefix_ = self.cantidad_nsprefix_ + ':' if (UseCapturedNS_ and self.cantidad_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scantidad>%s</%scantidad>%s' % (namespaceprefix_ , self.gds_format_decimal(self.cantidad, input_name='cantidad'), namespaceprefix_ , eol_))
        if self.precioUnitario is not None:
            namespaceprefix_ = self.precioUnitario_nsprefix_ + ':' if (UseCapturedNS_ and self.precioUnitario_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprecioUnitario>%s</%sprecioUnitario>%s' % (namespaceprefix_ , self.gds_format_decimal(self.precioUnitario, input_name='precioUnitario'), namespaceprefix_ , eol_))
        if self.precioSinSubsidio is not None:
            namespaceprefix_ = self.precioSinSubsidio_nsprefix_ + ':' if (UseCapturedNS_ and self.precioSinSubsidio_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprecioSinSubsidio>%s</%sprecioSinSubsidio>%s' % (namespaceprefix_ , self.gds_format_decimal(self.precioSinSubsidio, input_name='precioSinSubsidio'), namespaceprefix_ , eol_))
        if self.descuento is not None:
            namespaceprefix_ = self.descuento_nsprefix_ + ':' if (UseCapturedNS_ and self.descuento_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescuento>%s</%sdescuento>%s' % (namespaceprefix_ , self.gds_format_decimal(self.descuento, input_name='descuento'), namespaceprefix_ , eol_))
        if self.precioTotalSinImpuesto is not None:
            namespaceprefix_ = self.precioTotalSinImpuesto_nsprefix_ + ':' if (UseCapturedNS_ and self.precioTotalSinImpuesto_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprecioTotalSinImpuesto>%s</%sprecioTotalSinImpuesto>%s' % (namespaceprefix_ , self.gds_format_decimal(self.precioTotalSinImpuesto, input_name='precioTotalSinImpuesto'), namespaceprefix_ , eol_))
        if self.detallesAdicionales is not None:
            namespaceprefix_ = self.detallesAdicionales_nsprefix_ + ':' if (UseCapturedNS_ and self.detallesAdicionales_nsprefix_) else ''
            self.detallesAdicionales.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detallesAdicionales', pretty_print=pretty_print)
        if self.impuestos is not None:
            namespaceprefix_ = self.impuestos_nsprefix_ + ':' if (UseCapturedNS_ and self.impuestos_nsprefix_) else ''
            self.impuestos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='impuestos', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codigoPrincipal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigoPrincipal')
            value_ = self.gds_validate_string(value_, node, 'codigoPrincipal')
            self.codigoPrincipal = value_
            self.codigoPrincipal_nsprefix_ = child_.prefix
            # validate type codigoPrincipal
            self.validate_codigoPrincipal(self.codigoPrincipal)
        elif nodeName_ == 'codigoAuxiliar':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigoAuxiliar')
            value_ = self.gds_validate_string(value_, node, 'codigoAuxiliar')
            self.codigoAuxiliar = value_
            self.codigoAuxiliar_nsprefix_ = child_.prefix
            # validate type codigoAuxiliar
            self.validate_codigoAuxiliar(self.codigoAuxiliar)
        elif nodeName_ == 'descripcion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'descripcion')
            value_ = self.gds_validate_string(value_, node, 'descripcion')
            self.descripcion = value_
            self.descripcion_nsprefix_ = child_.prefix
            # validate type descripcion
            self.validate_descripcion(self.descripcion)
        elif nodeName_ == 'unidadMedida':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'unidadMedida')
            value_ = self.gds_validate_string(value_, node, 'unidadMedida')
            self.unidadMedida = value_
            self.unidadMedida_nsprefix_ = child_.prefix
            # validate type unidadMedida
            self.validate_unidadMedida(self.unidadMedida)
        elif nodeName_ == 'cantidad' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'cantidad')
            fval_ = self.gds_validate_decimal(fval_, node, 'cantidad')
            self.cantidad = fval_
            self.cantidad_nsprefix_ = child_.prefix
            # validate type cantidad
            self.validate_cantidad(self.cantidad)
        elif nodeName_ == 'precioUnitario' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'precioUnitario')
            fval_ = self.gds_validate_decimal(fval_, node, 'precioUnitario')
            self.precioUnitario = fval_
            self.precioUnitario_nsprefix_ = child_.prefix
            # validate type precioUnitario
            self.validate_precioUnitario(self.precioUnitario)
        elif nodeName_ == 'precioSinSubsidio' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'precioSinSubsidio')
            fval_ = self.gds_validate_decimal(fval_, node, 'precioSinSubsidio')
            self.precioSinSubsidio = fval_
            self.precioSinSubsidio_nsprefix_ = child_.prefix
            # validate type precioSinSubsidio
            self.validate_precioSinSubsidio(self.precioSinSubsidio)
        elif nodeName_ == 'descuento' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'descuento')
            fval_ = self.gds_validate_decimal(fval_, node, 'descuento')
            self.descuento = fval_
            self.descuento_nsprefix_ = child_.prefix
            # validate type descuento
            self.validate_descuento(self.descuento)
        elif nodeName_ == 'precioTotalSinImpuesto' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'precioTotalSinImpuesto')
            fval_ = self.gds_validate_decimal(fval_, node, 'precioTotalSinImpuesto')
            self.precioTotalSinImpuesto = fval_
            self.precioTotalSinImpuesto_nsprefix_ = child_.prefix
            # validate type precioTotalSinImpuesto
            self.validate_precioTotalSinImpuesto(self.precioTotalSinImpuesto)
        elif nodeName_ == 'detallesAdicionales':
            obj_ = detallesAdicionalesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detallesAdicionales = obj_
            obj_.original_tagname_ = 'detallesAdicionales'
        elif nodeName_ == 'impuestos':
            obj_ = impuestosType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.impuestos = obj_
            obj_.original_tagname_ = 'impuestos'
# end class detalleType


class detallesAdicionalesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, detAdicional=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if detAdicional is None:
            self.detAdicional = []
        else:
            self.detAdicional = detAdicional
        self.detAdicional_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detallesAdicionalesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detallesAdicionalesType.subclass:
            return detallesAdicionalesType.subclass(*args_, **kwargs_)
        else:
            return detallesAdicionalesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_detAdicional(self):
        return self.detAdicional
    def set_detAdicional(self, detAdicional):
        self.detAdicional = detAdicional
    def add_detAdicional(self, value):
        self.detAdicional.append(value)
    def insert_detAdicional_at(self, index, value):
        self.detAdicional.insert(index, value)
    def replace_detAdicional_at(self, index, value):
        self.detAdicional[index] = value
    def has__content(self):
        if (
            self.detAdicional
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detallesAdicionalesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detallesAdicionalesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detallesAdicionalesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detallesAdicionalesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detallesAdicionalesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detallesAdicionalesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='detallesAdicionalesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for detAdicional_ in self.detAdicional:
            namespaceprefix_ = self.detAdicional_nsprefix_ + ':' if (UseCapturedNS_ and self.detAdicional_nsprefix_) else ''
            detAdicional_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detAdicional', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'detAdicional':
            obj_ = detAdicionalType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detAdicional.append(obj_)
            obj_.original_tagname_ = 'detAdicional'
# end class detallesAdicionalesType


class detAdicionalType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, nombre=None, valor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.nombre = _cast(None, nombre)
        self.nombre_nsprefix_ = None
        self.valor = _cast(None, valor)
        self.valor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detAdicionalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detAdicionalType.subclass:
            return detAdicionalType.subclass(*args_, **kwargs_)
        else:
            return detAdicionalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_nombre(self):
        return self.nombre
    def set_nombre(self, nombre):
        self.nombre = nombre
    def get_valor(self):
        return self.valor
    def set_valor(self, valor):
        self.valor = valor
    def validate_nombreType(self, value):
        # Validate type nombreType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on nombreType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on nombreType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def validate_valorType(self, value):
        # Validate type valorType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on valorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on valorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='detAdicionalType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detAdicionalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detAdicionalType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detAdicionalType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detAdicionalType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detAdicionalType'):
        if self.nombre is not None and 'nombre' not in already_processed:
            already_processed.add('nombre')
            outfile.write(' nombre=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.nombre), input_name='nombre')), ))
        if self.valor is not None and 'valor' not in already_processed:
            already_processed.add('valor')
            outfile.write(' valor=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.valor), input_name='valor')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='detAdicionalType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('nombre', node)
        if value is not None and 'nombre' not in already_processed:
            already_processed.add('nombre')
            self.nombre = value
            self.validate_nombreType(self.nombre)    # validate type nombreType
        value = find_attr_value_('valor', node)
        if value is not None and 'valor' not in already_processed:
            already_processed.add('valor')
            self.valor = value
            self.validate_valorType(self.valor)    # validate type valorType
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class detAdicionalType


class impuestosType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, impuesto=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if impuesto is None:
            self.impuesto = []
        else:
            self.impuesto = impuesto
        self.impuesto_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, impuestosType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if impuestosType.subclass:
            return impuestosType.subclass(*args_, **kwargs_)
        else:
            return impuestosType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_impuesto(self):
        return self.impuesto
    def set_impuesto(self, impuesto):
        self.impuesto = impuesto
    def add_impuesto(self, value):
        self.impuesto.append(value)
    def insert_impuesto_at(self, index, value):
        self.impuesto.insert(index, value)
    def replace_impuesto_at(self, index, value):
        self.impuesto[index] = value
    def has__content(self):
        if (
            self.impuesto
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='impuestosType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('impuestosType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'impuestosType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='impuestosType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='impuestosType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='impuestosType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='impuestosType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for impuesto_ in self.impuesto:
            namespaceprefix_ = self.impuesto_nsprefix_ + ':' if (UseCapturedNS_ and self.impuesto_nsprefix_) else ''
            impuesto_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='impuesto', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'impuesto':
            obj_ = impuesto.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.impuesto.append(obj_)
            obj_.original_tagname_ = 'impuesto'
# end class impuestosType


class retencionesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, retencion=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if retencion is None:
            self.retencion = []
        else:
            self.retencion = retencion
        self.retencion_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, retencionesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if retencionesType.subclass:
            return retencionesType.subclass(*args_, **kwargs_)
        else:
            return retencionesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_retencion(self):
        return self.retencion
    def set_retencion(self, retencion):
        self.retencion = retencion
    def add_retencion(self, value):
        self.retencion.append(value)
    def insert_retencion_at(self, index, value):
        self.retencion.insert(index, value)
    def replace_retencion_at(self, index, value):
        self.retencion[index] = value
    def has__content(self):
        if (
            self.retencion
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='retencionesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('retencionesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'retencionesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='retencionesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='retencionesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='retencionesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='retencionesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for retencion_ in self.retencion:
            namespaceprefix_ = self.retencion_nsprefix_ + ':' if (UseCapturedNS_ and self.retencion_nsprefix_) else ''
            retencion_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='retencion', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'retencion':
            obj_ = retencionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.retencion.append(obj_)
            obj_.original_tagname_ = 'retencion'
# end class retencionesType


class retencionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codigo=None, codigoPorcentaje=None, tarifa=None, valor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codigo = codigo
        self.validate_codigoRetencion(self.codigo)
        self.codigo_nsprefix_ = None
        self.codigoPorcentaje = codigoPorcentaje
        self.validate_codigoPorcentajeRetencion(self.codigoPorcentaje)
        self.codigoPorcentaje_nsprefix_ = None
        self.tarifa = tarifa
        self.validate_tarifaRetencion(self.tarifa)
        self.tarifa_nsprefix_ = None
        self.valor = valor
        self.validate_valorRetencion(self.valor)
        self.valor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, retencionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if retencionType.subclass:
            return retencionType.subclass(*args_, **kwargs_)
        else:
            return retencionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codigo(self):
        return self.codigo
    def set_codigo(self, codigo):
        self.codigo = codigo
    def get_codigoPorcentaje(self):
        return self.codigoPorcentaje
    def set_codigoPorcentaje(self, codigoPorcentaje):
        self.codigoPorcentaje = codigoPorcentaje
    def get_tarifa(self):
        return self.tarifa
    def set_tarifa(self, tarifa):
        self.tarifa = tarifa
    def get_valor(self):
        return self.valor
    def set_valor(self, valor):
        self.valor = valor
    def validate_codigoRetencion(self, value):
        result = True
        # Validate type codigoRetencion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoRetencion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoRetencion_patterns_, ))
                result = False
        return result
    validate_codigoRetencion_patterns_ = [['^([4]{1})$']]
    def validate_codigoPorcentajeRetencion(self, value):
        result = True
        # Validate type codigoPorcentajeRetencion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_codigoPorcentajeRetencion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_codigoPorcentajeRetencion_patterns_, ))
                result = False
        return result
    validate_codigoPorcentajeRetencion_patterns_ = [['^([0-9]{1,3})$']]
    def validate_tarifaRetencion(self, value):
        result = True
        # Validate type tarifaRetencion, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on tarifaRetencion' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on tarifaRetencion' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_valorRetencion(self, value):
        result = True
        # Validate type valorRetencion, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on valorRetencion' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on valorRetencion' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.codigo is not None or
            self.codigoPorcentaje is not None or
            self.tarifa is not None or
            self.valor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='retencionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('retencionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'retencionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='retencionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='retencionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='retencionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='retencionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigo is not None:
            namespaceprefix_ = self.codigo_nsprefix_ + ':' if (UseCapturedNS_ and self.codigo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigo>%s</%scodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigo), input_name='codigo')), namespaceprefix_ , eol_))
        if self.codigoPorcentaje is not None:
            namespaceprefix_ = self.codigoPorcentaje_nsprefix_ + ':' if (UseCapturedNS_ and self.codigoPorcentaje_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPorcentaje>%s</%scodigoPorcentaje>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codigoPorcentaje), input_name='codigoPorcentaje')), namespaceprefix_ , eol_))
        if self.tarifa is not None:
            namespaceprefix_ = self.tarifa_nsprefix_ + ':' if (UseCapturedNS_ and self.tarifa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%starifa>%s</%starifa>%s' % (namespaceprefix_ , self.gds_format_decimal(self.tarifa, input_name='tarifa'), namespaceprefix_ , eol_))
        if self.valor is not None:
            namespaceprefix_ = self.valor_nsprefix_ + ':' if (UseCapturedNS_ and self.valor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalor>%s</%svalor>%s' % (namespaceprefix_ , self.gds_format_decimal(self.valor, input_name='valor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codigo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigo')
            value_ = self.gds_validate_string(value_, node, 'codigo')
            self.codigo = value_
            self.codigo_nsprefix_ = child_.prefix
            # validate type codigoRetencion
            self.validate_codigoRetencion(self.codigo)
        elif nodeName_ == 'codigoPorcentaje':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codigoPorcentaje')
            value_ = self.gds_validate_string(value_, node, 'codigoPorcentaje')
            self.codigoPorcentaje = value_
            self.codigoPorcentaje_nsprefix_ = child_.prefix
            # validate type codigoPorcentajeRetencion
            self.validate_codigoPorcentajeRetencion(self.codigoPorcentaje)
        elif nodeName_ == 'tarifa' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'tarifa')
            fval_ = self.gds_validate_decimal(fval_, node, 'tarifa')
            self.tarifa = fval_
            self.tarifa_nsprefix_ = child_.prefix
            # validate type tarifaRetencion
            self.validate_tarifaRetencion(self.tarifa)
        elif nodeName_ == 'valor' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'valor')
            fval_ = self.gds_validate_decimal(fval_, node, 'valor')
            self.valor = fval_
            self.valor_nsprefix_ = child_.prefix
            # validate type valorRetencion
            self.validate_valorRetencion(self.valor)
# end class retencionType


class infoSustitutivaGuiaRemisionType(GeneratedsSuper):
    """infoSustitutivaGuiaRemisionType -- Contiene la informacion sustitutiva de guia de remision
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, dirPartida=None, dirDestinatario=None, fechaIniTransporte=None, fechaFinTransporte=None, razonSocialTransportista=None, tipoIdentificacionTransportista=None, rucTransportista=None, placa=None, destinos=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.dirPartida = dirPartida
        self.validate_dirPartida(self.dirPartida)
        self.dirPartida_nsprefix_ = None
        self.dirDestinatario = dirDestinatario
        self.validate_dirDestinatario(self.dirDestinatario)
        self.dirDestinatario_nsprefix_ = None
        self.fechaIniTransporte = fechaIniTransporte
        self.validate_fechaType(self.fechaIniTransporte)
        self.fechaIniTransporte_nsprefix_ = None
        self.fechaFinTransporte = fechaFinTransporte
        self.validate_fechaType(self.fechaFinTransporte)
        self.fechaFinTransporte_nsprefix_ = None
        self.razonSocialTransportista = razonSocialTransportista
        self.validate_razonSocial(self.razonSocialTransportista)
        self.razonSocialTransportista_nsprefix_ = None
        self.tipoIdentificacionTransportista = tipoIdentificacionTransportista
        self.validate_tipoIdentificacion(self.tipoIdentificacionTransportista)
        self.tipoIdentificacionTransportista_nsprefix_ = None
        self.rucTransportista = rucTransportista
        self.validate_rucTransportista(self.rucTransportista)
        self.rucTransportista_nsprefix_ = None
        self.placa = placa
        self.validate_placa(self.placa)
        self.placa_nsprefix_ = None
        self.destinos = destinos
        self.destinos_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoSustitutivaGuiaRemisionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoSustitutivaGuiaRemisionType.subclass:
            return infoSustitutivaGuiaRemisionType.subclass(*args_, **kwargs_)
        else:
            return infoSustitutivaGuiaRemisionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_dirPartida(self):
        return self.dirPartida
    def set_dirPartida(self, dirPartida):
        self.dirPartida = dirPartida
    def get_dirDestinatario(self):
        return self.dirDestinatario
    def set_dirDestinatario(self, dirDestinatario):
        self.dirDestinatario = dirDestinatario
    def get_fechaIniTransporte(self):
        return self.fechaIniTransporte
    def set_fechaIniTransporte(self, fechaIniTransporte):
        self.fechaIniTransporte = fechaIniTransporte
    def get_fechaFinTransporte(self):
        return self.fechaFinTransporte
    def set_fechaFinTransporte(self, fechaFinTransporte):
        self.fechaFinTransporte = fechaFinTransporte
    def get_razonSocialTransportista(self):
        return self.razonSocialTransportista
    def set_razonSocialTransportista(self, razonSocialTransportista):
        self.razonSocialTransportista = razonSocialTransportista
    def get_tipoIdentificacionTransportista(self):
        return self.tipoIdentificacionTransportista
    def set_tipoIdentificacionTransportista(self, tipoIdentificacionTransportista):
        self.tipoIdentificacionTransportista = tipoIdentificacionTransportista
    def get_rucTransportista(self):
        return self.rucTransportista
    def set_rucTransportista(self, rucTransportista):
        self.rucTransportista = rucTransportista
    def get_placa(self):
        return self.placa
    def set_placa(self, placa):
        self.placa = placa
    def get_destinos(self):
        return self.destinos
    def set_destinos(self, destinos):
        self.destinos = destinos
    def validate_dirPartida(self, value):
        result = True
        # Validate type dirPartida, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on dirPartida' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on dirPartida' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_dirPartida_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_dirPartida_patterns_, ))
                result = False
        return result
    validate_dirPartida_patterns_ = [['^([^\\n]*)$']]
    def validate_dirDestinatario(self, value):
        result = True
        # Validate type dirDestinatario, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on dirDestinatario' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on dirDestinatario' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_dirDestinatario_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_dirDestinatario_patterns_, ))
                result = False
        return result
    validate_dirDestinatario_patterns_ = [['^([^\\n]*)$']]
    def validate_fechaType(self, value):
        result = True
        # Validate type fechaType, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_fechaType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_fechaType_patterns_, ))
                result = False
        return result
    validate_fechaType_patterns_ = [['^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/20[0-9][0-9])$']]
    def validate_razonSocial(self, value):
        result = True
        # Validate type razonSocial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on razonSocial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on razonSocial' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_razonSocial_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_razonSocial_patterns_, ))
                result = False
        return result
    validate_razonSocial_patterns_ = [['^([^\\n]*)$']]
    def validate_tipoIdentificacion(self, value):
        result = True
        # Validate type tipoIdentificacion, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_tipoIdentificacion_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_tipoIdentificacion_patterns_, ))
                result = False
        return result
    validate_tipoIdentificacion_patterns_ = [['^([0][4-8])$']]
    def validate_rucTransportista(self, value):
        result = True
        # Validate type rucTransportista, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on rucTransportista' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on rucTransportista' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_rucTransportista_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_rucTransportista_patterns_, ))
                result = False
        return result
    validate_rucTransportista_patterns_ = [['^([^\\n]*)$']]
    def validate_placa(self, value):
        result = True
        # Validate type placa, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on placa' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on placa' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if not self.gds_validate_simple_patterns(
                    self.validate_placa_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_placa_patterns_, ))
                result = False
        return result
    validate_placa_patterns_ = [['^([^\\n]*)$']]
    def has__content(self):
        if (
            self.dirPartida is not None or
            self.dirDestinatario is not None or
            self.fechaIniTransporte is not None or
            self.fechaFinTransporte is not None or
            self.razonSocialTransportista is not None or
            self.tipoIdentificacionTransportista is not None or
            self.rucTransportista is not None or
            self.placa is not None or
            self.destinos is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoSustitutivaGuiaRemisionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoSustitutivaGuiaRemisionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoSustitutivaGuiaRemisionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoSustitutivaGuiaRemisionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoSustitutivaGuiaRemisionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoSustitutivaGuiaRemisionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoSustitutivaGuiaRemisionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dirPartida is not None:
            namespaceprefix_ = self.dirPartida_nsprefix_ + ':' if (UseCapturedNS_ and self.dirPartida_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdirPartida>%s</%sdirPartida>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dirPartida), input_name='dirPartida')), namespaceprefix_ , eol_))
        if self.dirDestinatario is not None:
            namespaceprefix_ = self.dirDestinatario_nsprefix_ + ':' if (UseCapturedNS_ and self.dirDestinatario_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdirDestinatario>%s</%sdirDestinatario>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dirDestinatario), input_name='dirDestinatario')), namespaceprefix_ , eol_))
        if self.fechaIniTransporte is not None:
            namespaceprefix_ = self.fechaIniTransporte_nsprefix_ + ':' if (UseCapturedNS_ and self.fechaIniTransporte_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfechaIniTransporte>%s</%sfechaIniTransporte>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.fechaIniTransporte), input_name='fechaIniTransporte')), namespaceprefix_ , eol_))
        if self.fechaFinTransporte is not None:
            namespaceprefix_ = self.fechaFinTransporte_nsprefix_ + ':' if (UseCapturedNS_ and self.fechaFinTransporte_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfechaFinTransporte>%s</%sfechaFinTransporte>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.fechaFinTransporte), input_name='fechaFinTransporte')), namespaceprefix_ , eol_))
        if self.razonSocialTransportista is not None:
            namespaceprefix_ = self.razonSocialTransportista_nsprefix_ + ':' if (UseCapturedNS_ and self.razonSocialTransportista_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srazonSocialTransportista>%s</%srazonSocialTransportista>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.razonSocialTransportista), input_name='razonSocialTransportista')), namespaceprefix_ , eol_))
        if self.tipoIdentificacionTransportista is not None:
            namespaceprefix_ = self.tipoIdentificacionTransportista_nsprefix_ + ':' if (UseCapturedNS_ and self.tipoIdentificacionTransportista_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoIdentificacionTransportista>%s</%stipoIdentificacionTransportista>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tipoIdentificacionTransportista), input_name='tipoIdentificacionTransportista')), namespaceprefix_ , eol_))
        if self.rucTransportista is not None:
            namespaceprefix_ = self.rucTransportista_nsprefix_ + ':' if (UseCapturedNS_ and self.rucTransportista_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srucTransportista>%s</%srucTransportista>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.rucTransportista), input_name='rucTransportista')), namespaceprefix_ , eol_))
        if self.placa is not None:
            namespaceprefix_ = self.placa_nsprefix_ + ':' if (UseCapturedNS_ and self.placa_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splaca>%s</%splaca>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.placa), input_name='placa')), namespaceprefix_ , eol_))
        if self.destinos is not None:
            namespaceprefix_ = self.destinos_nsprefix_ + ':' if (UseCapturedNS_ and self.destinos_nsprefix_) else ''
            self.destinos.export(outfile, level, namespaceprefix_, namespacedef_='', name_='destinos', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'dirPartida':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dirPartida')
            value_ = self.gds_validate_string(value_, node, 'dirPartida')
            self.dirPartida = value_
            self.dirPartida_nsprefix_ = child_.prefix
            # validate type dirPartida
            self.validate_dirPartida(self.dirPartida)
        elif nodeName_ == 'dirDestinatario':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dirDestinatario')
            value_ = self.gds_validate_string(value_, node, 'dirDestinatario')
            self.dirDestinatario = value_
            self.dirDestinatario_nsprefix_ = child_.prefix
            # validate type dirDestinatario
            self.validate_dirDestinatario(self.dirDestinatario)
        elif nodeName_ == 'fechaIniTransporte':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'fechaIniTransporte')
            value_ = self.gds_validate_string(value_, node, 'fechaIniTransporte')
            self.fechaIniTransporte = value_
            self.fechaIniTransporte_nsprefix_ = child_.prefix
            # validate type fechaType
            self.validate_fechaType(self.fechaIniTransporte)
        elif nodeName_ == 'fechaFinTransporte':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'fechaFinTransporte')
            value_ = self.gds_validate_string(value_, node, 'fechaFinTransporte')
            self.fechaFinTransporte = value_
            self.fechaFinTransporte_nsprefix_ = child_.prefix
            # validate type fechaType
            self.validate_fechaType(self.fechaFinTransporte)
        elif nodeName_ == 'razonSocialTransportista':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'razonSocialTransportista')
            value_ = self.gds_validate_string(value_, node, 'razonSocialTransportista')
            self.razonSocialTransportista = value_
            self.razonSocialTransportista_nsprefix_ = child_.prefix
            # validate type razonSocial
            self.validate_razonSocial(self.razonSocialTransportista)
        elif nodeName_ == 'tipoIdentificacionTransportista':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'tipoIdentificacionTransportista')
            value_ = self.gds_validate_string(value_, node, 'tipoIdentificacionTransportista')
            self.tipoIdentificacionTransportista = value_
            self.tipoIdentificacionTransportista_nsprefix_ = child_.prefix
            # validate type tipoIdentificacion
            self.validate_tipoIdentificacion(self.tipoIdentificacionTransportista)
        elif nodeName_ == 'rucTransportista':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'rucTransportista')
            value_ = self.gds_validate_string(value_, node, 'rucTransportista')
            self.rucTransportista = value_
            self.rucTransportista_nsprefix_ = child_.prefix
            # validate type rucTransportista
            self.validate_rucTransportista(self.rucTransportista)
        elif nodeName_ == 'placa':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'placa')
            value_ = self.gds_validate_string(value_, node, 'placa')
            self.placa = value_
            self.placa_nsprefix_ = child_.prefix
            # validate type placa
            self.validate_placa(self.placa)
        elif nodeName_ == 'destinos':
            obj_ = destinosType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.destinos = obj_
            obj_.original_tagname_ = 'destinos'
# end class infoSustitutivaGuiaRemisionType


class destinosType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, destino=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if destino is None:
            self.destino = []
        else:
            self.destino = destino
        self.destino_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, destinosType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if destinosType.subclass:
            return destinosType.subclass(*args_, **kwargs_)
        else:
            return destinosType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_destino(self):
        return self.destino
    def set_destino(self, destino):
        self.destino = destino
    def add_destino(self, value):
        self.destino.append(value)
    def insert_destino_at(self, index, value):
        self.destino.insert(index, value)
    def replace_destino_at(self, index, value):
        self.destino[index] = value
    def has__content(self):
        if (
            self.destino
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='destinosType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('destinosType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'destinosType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='destinosType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='destinosType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='destinosType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='destinosType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for destino_ in self.destino:
            namespaceprefix_ = self.destino_nsprefix_ + ':' if (UseCapturedNS_ and self.destino_nsprefix_) else ''
            destino_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='destino', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'destino':
            obj_ = destino.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.destino.append(obj_)
            obj_.original_tagname_ = 'destino'
# end class destinosType


class otrosRubrosTercerosType(GeneratedsSuper):
    """otrosRubrosTercerosType -- Contiene la informacion sustitutiva de rubros de terceros
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, rubro=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if rubro is None:
            self.rubro = []
        else:
            self.rubro = rubro
        self.rubro_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, otrosRubrosTercerosType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if otrosRubrosTercerosType.subclass:
            return otrosRubrosTercerosType.subclass(*args_, **kwargs_)
        else:
            return otrosRubrosTercerosType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_rubro(self):
        return self.rubro
    def set_rubro(self, rubro):
        self.rubro = rubro
    def add_rubro(self, value):
        self.rubro.append(value)
    def insert_rubro_at(self, index, value):
        self.rubro.insert(index, value)
    def replace_rubro_at(self, index, value):
        self.rubro[index] = value
    def has__content(self):
        if (
            self.rubro
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='otrosRubrosTercerosType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('otrosRubrosTercerosType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'otrosRubrosTercerosType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='otrosRubrosTercerosType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='otrosRubrosTercerosType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='otrosRubrosTercerosType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='otrosRubrosTercerosType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for rubro_ in self.rubro:
            namespaceprefix_ = self.rubro_nsprefix_ + ':' if (UseCapturedNS_ and self.rubro_nsprefix_) else ''
            rubro_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='rubro', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'rubro':
            obj_ = rubro.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.rubro.append(obj_)
            obj_.original_tagname_ = 'rubro'
# end class otrosRubrosTercerosType


class infoAdicionalType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, campoAdicional=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if campoAdicional is None:
            self.campoAdicional = []
        else:
            self.campoAdicional = campoAdicional
        self.campoAdicional_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoAdicionalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoAdicionalType.subclass:
            return infoAdicionalType.subclass(*args_, **kwargs_)
        else:
            return infoAdicionalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_campoAdicional(self):
        return self.campoAdicional
    def set_campoAdicional(self, campoAdicional):
        self.campoAdicional = campoAdicional
    def add_campoAdicional(self, value):
        self.campoAdicional.append(value)
    def insert_campoAdicional_at(self, index, value):
        self.campoAdicional.insert(index, value)
    def replace_campoAdicional_at(self, index, value):
        self.campoAdicional[index] = value
    def has__content(self):
        if (
            self.campoAdicional
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoAdicionalType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoAdicionalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoAdicionalType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoAdicionalType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoAdicionalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoAdicionalType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.w3.org/2001/XMLSchema" ', name_='infoAdicionalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for campoAdicional_ in self.campoAdicional:
            namespaceprefix_ = self.campoAdicional_nsprefix_ + ':' if (UseCapturedNS_ and self.campoAdicional_nsprefix_) else ''
            campoAdicional_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='campoAdicional', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'campoAdicional':
            obj_ = campoAdicionalType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.campoAdicional.append(obj_)
            obj_.original_tagname_ = 'campoAdicional'
# end class infoAdicionalType


class campoAdicionalType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, nombre=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.nombre = _cast(None, nombre)
        self.nombre_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, campoAdicionalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if campoAdicionalType.subclass:
            return campoAdicionalType.subclass(*args_, **kwargs_)
        else:
            return campoAdicionalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_nombre(self):
        return self.nombre
    def set_nombre(self, nombre):
        self.nombre = nombre
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_campoAdicional(self, value):
        result = True
        # Validate type campoAdicional, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on campoAdicional' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on campoAdicional' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_nombre(self, value):
        # Validate type nombre, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on nombre' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on nombre' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='campoAdicionalType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('campoAdicionalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'campoAdicionalType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='campoAdicionalType')
        outfile.write('>')
        self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='campoAdicionalType'):
        if self.nombre is not None and 'nombre' not in already_processed:
            already_processed.add('nombre')
            outfile.write(' nombre=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.nombre), input_name='nombre')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='campoAdicionalType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('nombre', node)
        if value is not None and 'nombre' not in already_processed:
            already_processed.add('nombre')
            self.nombre = value
            self.validate_nombre(self.nombre)    # validate type nombre
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class campoAdicionalType


#
# End data representation classes.
#


GDSClassesMapping = {
    'CanonicalizationMethod': CanonicalizationMethodType,
    'DSAKeyValue': DSAKeyValueType,
    'DigestMethod': DigestMethodType,
    'DigestValue': DigestValueType,
    'KeyInfo': KeyInfoType,
    'KeyValue': KeyValueType,
    'Manifest': ManifestType,
    'Object': ObjectType,
    'PGPData': PGPDataType,
    'RSAKeyValue': RSAKeyValueType,
    'Reference': ReferenceType,
    'RetrievalMethod': RetrievalMethodType,
    'SPKIData': SPKIDataType,
    'Signature': SignatureType,
    'SignatureMethod': SignatureMethodType,
    'SignatureProperties': SignaturePropertiesType,
    'SignatureProperty': SignaturePropertyType,
    'SignatureValue': SignatureValueType,
    'SignedInfo': SignedInfoType,
    'Transform': TransformType,
    'Transforms': TransformsType,
    'X509Data': X509DataType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'infoTributaria'
        rootClass = infoTributaria
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'infoTributaria'
        rootClass = infoTributaria
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'infoTributaria'
        rootClass = infoTributaria
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'infoTributaria'
        rootClass = infoTributaria
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from factura_v2 import *\n\n')
        sys.stdout.write('import factura_v2 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'http://www.w3.org/2000/09/xmldsig#': [('CryptoBinary',
                                         'xmldsig-core-schema.xsd',
                                         'ST'),
                                        ('DigestValueType',
                                         'xmldsig-core-schema.xsd',
                                         'ST'),
                                        ('HMACOutputLengthType',
                                         'xmldsig-core-schema.xsd',
                                         'ST'),
                                        ('SignatureType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignatureValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignedInfoType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('CanonicalizationMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignatureMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('ReferenceType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('TransformsType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('TransformType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('DigestMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('KeyInfoType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('KeyValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('RetrievalMethodType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('X509DataType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('X509IssuerSerialType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('PGPDataType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SPKIDataType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('ObjectType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('ManifestType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignaturePropertiesType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('SignaturePropertyType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('DSAKeyValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT'),
                                        ('RSAKeyValueType',
                                         'xmldsig-core-schema.xsd',
                                         'CT')]}

__all__ = [
    "CanonicalizationMethodType",
    "DSAKeyValueType",
    "DigestMethodType",
    "DigestValueType",
    "KeyInfoType",
    "KeyValueType",
    "ManifestType",
    "ObjectType",
    "PGPDataType",
    "RSAKeyValueType",
    "ReferenceType",
    "RetrievalMethodType",
    "SPKIDataType",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "X509IssuerSerialType",
    "campoAdicionalType",
    "compensacion",
    "compensaciones",
    "compensacionesReembolso",
    "destino",
    "destinosType",
    "detAdicionalType",
    "detalleImpuestoType",
    "detalleImpuestos",
    "detalleType",
    "detallesAdicionalesType",
    "detallesType",
    "factura",
    "impuesto",
    "impuestosType",
    "infoAdicionalType",
    "infoFacturaType",
    "infoSustitutivaGuiaRemisionType",
    "infoTributaria",
    "maquinaFiscal",
    "otrosRubrosTercerosType",
    "pagoType",
    "pagos",
    "reembolsoDetalleType",
    "reembolsos",
    "retencionType",
    "retencionesType",
    "rubro",
    "tipoNegociable",
    "totalConImpuestosType",
    "totalImpuestoType"
]
